Package jah ;

Helpers
	/* BASICOS */
	digitos = ['0' .. '9'];
	letras = ['a' .. 'z'] | ['A' .. 'Z'];
	
	/* CARACTERES ESPECIAIS */
	aspasimples	= ''';
	aspadupla	= '"';
	underline	= '_';
	virgula		= ',';

	/* QUEBRA DE LINHA */
	tab = 9;
	cr = 13;
	lf = 10;
	nl = (cr lf | cr | lf);
	branco = (' ' | '	')+;
	
	/* PARA COMBINACOES */
	menorque	='<';
	maiorque	='>';
	iguala		='=';
	e			='e';
	ou			='ou';
	nao			='nao';
	doispontos	= ':';
	val_bool 	= 'verdadeiro' | 'falso';	
	
Tokens
	
	/* PALAVRAS RESERVADAS DO PROGRAMA */
	programa 	= 'programa';
	inicio 		= 'inicio';
	fim 		= 'fim';
	fim_programa= 'fim.';
	leia 		= 'leia';
	escreva 	= 'escreva';
	constante 	= 'const';
	faca		= 'faca';
	ate			= 'ate';
	de 			= 'de';
	passo		= 'passo';
	senao		= 'senao';
	entao		= 'entao';
	
	/* EXPRESSOES CONDICIONAIS */
	se 		= 'se';
	caso 	= 'caso';
	avalie 	= 'avalie';
	
	/* LOOPS */
	enquanto= 'enquanto';
	para 	= 'para';
	repita	= 'repita';
	
	/* OPERADORES ARITMETICOS */
	soma 	= '+';
	sub 	= '-';
	mult 	= '*';
	div 	= '/';
	
	/* OPERADORES RELACIONAIS */
	maior 		= maiorque;
	menor 		= menorque;
	igual 		= iguala;
	maior_igual = maiorque iguala;
	menor_igual = menorque iguala;
	diferente	= menorque maiorque;
	
	/* OPERADORES BOOLEANOS */
	nao = 'nao';
	e	= 'e';
	ou 	= 'ou';
	xor	= 'xor';
		
	/* TIPOS */
	tipo_inteiro	= 'inteiro';
	tipo_real		= 'real';
	tipo_string		= 'caractere';
	tipo_booleano	= 'booleano';
	
	/* OUTROS TOKENS */
	virgula				= virgula;
	ponto				= '.';
	ponto_virgula		= ';';
	dois_pontos			= doispontos;
	abre_parentesis		= '(';
	fecha_parentesis	= ')';
	abre_colchetes		= '[';
	fecha_colchetes		= ']';
	atribuicao			= doispontos iguala;
	aspas_simples		= aspasimples;
	aspas_duplas		= aspadupla;
	nova_linha			= nl;
	tab					= '	';
	espaco				= ' ';
	
	/* ID E VALORES */
	inteiro	= digitos+;
	real	= digitos+ virgula digitos+;
	string	= aspasimples (letras | digitos | branco)+ aspasimples;
	booleano= val_bool;
	id		= (letras | underline) (letras | underline | digitos)*;

	/* COMENTARIOS */
	comentario_linha = '//';
	comentario_bloco_abre = '/*';	
	comentario_bloco_fecha = '*/';

Ignored Tokens
	tab, espaco, nova_linha;

Productions

	/********************************* GERAL *********************************/
	pgr_inicio {-> pgr} 
		= {pgr} programa id inicio [m]:decls? [r]:comms? fim_programa {-> New pgr.pgr(id, [m.decls], [r.comms])};
	
	// PLURAIS

	decls {-> decls}
		= {mais_decls} [arg]:decl [rest]:decls	{-> [arg.decls, rest.decls]}
		| {ultima_decl} [arg]:decl				{-> [arg.decls]};
	
	comms {-> comms}
		= {mais_comandos} [arg]:comm [rest]:comms 	{-> [arg.comms, rest.comms]}
		| {ultimo_comando} [arg]:comm					{-> [arg.comms]};
		
	pos_decl {-> vars}
		= {com_virgula} [arg]:var virgula [rest]:pos_decl	{-> [arg.vars, rest.vars]}
		| {sem_virgula} [arg]:var							{-> [arg.vars]};
		
	/********************************* DECLARACOES *********************************/
		
	decl 
		= {variavel} tipo dois_pontos pos_decl ponto_virgula
		| {constante} constante id valor ponto_virgula
	;
	
	tipo
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string
	;
	
	var
		= {normal} id
		| {array} id abre_colchetes inteiro fecha_colchetes
	;
	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real
	;
	
	/****************************** COMANDOS ******************************/
		
	comm
		= {simples} var atribuicao exp ponto_virgula
		| {leia} comm_leia
		| {escreva} comm_escreva
		| {se} comm_se
		| {avalie} comm_avalie
		| {enquanto} comm_enquanto
		| {repita} comm_repita
		| {para} comm_para
	;
	
	// ########## COMANDO LEIA
	comm_leia = leia abre_parentesis comm_leia_segunda_parte;
	comm_leia_segunda_parte 
		= {varios_exp} exp virgula comm_leia_segunda_parte 
		| {um_exp} exp comm_leia_terceira_parte;
	comm_leia_terceira_parte = fecha_parentesis ponto_virgula;

	// ########## COMANDO ESCREVA
	comm_escreva = escreva abre_parentesis comm_escreva_segunda_parte;
	comm_escreva_segunda_parte 
		= {varios_exp} exp_ou_exp_logica virgula comm_escreva_segunda_parte 
		| {um_exp} exp_ou_exp_logica comm_escreva_terceira_parte;
	comm_escreva_terceira_parte = fecha_parentesis ponto_virgula;

	// ########## COMANDO SE
	comm_se = se abre_parentesis exp_logica fecha_parentesis entao comms comm_se_senao? comm_se_fim;
	comm_se_senao = senao comms;
	comm_se_fim = fim se ponto_virgula;

	// ########## COMANDO AVALIE
	comm_avalie = avalie abre_parentesis exp_ou_exp_logica fecha_parentesis comm_avalie_caso_parte;
	comm_avalie_caso_parte 
		= {com_caso} caso valor dois_pontos comms comm_avalie_caso_parte
		| {sem_caso} comm_avalie_senao_parte;
	comm_avalie_senao_parte 
		= {com_senao} senao dois_pontos comms comm_avalie_fim 
		| {sem_senao} comm_avalie_fim;
	comm_avalie_fim = fim avalie ponto_virgula;
	
	// ########## COMANDO ENQUANTO
	comm_enquanto = enquanto abre_parentesis exp_logica fecha_parentesis faca comms comm_enquanto_fim;
	comm_enquanto_fim = fim enquanto ponto_virgula;
	
	// ########## COMANDO REPITA
	comm_repita = repita comm_repita_comandos_parte;
	comm_repita_comandos_parte = comms ate comm_repita_condicao_parte;
	comm_repita_condicao_parte = abre_parentesis exp_logica fecha_parentesis ponto_virgula;
	
	// ########## COMANDO PARA
	comm_para = para var de inteiro comm_para_passa;
	comm_para_passa 
		= {com_passo} passo inteiro comm_para_ate
		| {sem_passo} comm_para_ate;
	comm_para_ate = ate inteiro comm_para_meio;
	comm_para_meio = faca comms comm_para_fim;
	comm_para_fim = fim para ponto_virgula;
	
	// #################### EXPRESSOES
	exp_ou_exp_logica
		= {ari} exp
		| {log} exp_logica
	;

	exp 
		= {soma} exp soma termo 
		| {subt} exp sub termo
		| {term} termo
	;
			
	termo 
		= {mult} termo mult exp_final 
		| {divi} termo div exp_final
		| {fim} exp_final
	;
	
	exp_final 
		= {parentesis} abre_parentesis exp fecha_parentesis  
		| {negativa_exp} sub exp_final
		| {substituir_var} var
		| {substituir_val} valor
	;
					   		  
	exp_logica 
		= {and} exp_logica e log_prec_um
		| {ou}  exp_logica ou log_prec_um
		| {xor} exp_logica xor log_prec_um
		| {not} nao log_prec_um
		| {prx} log_prec_um
	;

	log_prec_um 
		= {diferente} exp diferente termo
		| {igual} exp igual termo
		| {fator} log_prec_dois
	;
		
	log_prec_dois 
		= {maior} exp maior termo
		| {menor} exp menor termo
		| {maiorq} exp maior_igual termo
		| {menorq} exp menor_igual termo
		| {par} abre_parentesis exp_logica fecha_parentesis
	;

Abstract Syntax Tree
	
	/********************************* GERAL *********************************/
	pgr 
		= {pgr} id [m]:decls [r]:comms
	;
		
	// PLURAIS
	comms = comm*;
	decls = decl*;
	vars = var*;
	
		
	/********************************* DECLARACOES *********************************/
	
	decl
		= {variavel} [l]:tipo [r]:pos_decl
		| {constante} constante id [r]:valor
	;
	
	pos_decl
		= {com_virgula} [l]:var [r]:pos_decl
		| {sem_virgula} var
	;
	
	tipo
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string
	;
	
	var
		= {normal} id
		| {array} [l]:id [r]:inteiro
	;
	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real
	;
	
	/********************************* COMANDOS *********************************/
	comm 
		= {leia} var+
		| {escreva} exp+
		| {se} exp_logica comm+ senao_parte?
		| {avalie} exp caso_parte* senao_parte?
		| {enquanto} exp_logica comm+
		| {repita} comm+ exp_logica
		| {para} var [intini]:tipo_inteiro passo_parte? [intfim]:tipo_inteiro comm+
	;
	
	caso_parte
		= {caso} [l]:valor [r]:comm
	;
		
	senao_parte
		= {senao} comm+
	;
	
	passo_parte
		= {passo} tipo_inteiro
	;
	
	exp 
		= {soma} [l]:exp [r]:exp
		| {subt} [l]:exp [r]:exp
		| {mult} [l]:exp [r]:exp
		| {divi} [l]:exp [r]:exp
		| {var} var
		| {valor} valor
	;

	exp_logica
		= {not} exp_logica
		| {ou}  [l]:exp_logica [r]:exp_logica
		| {and} [l]:exp_logica [r]:exp_logica
		| {xor} [l]:exp_logica [r]:exp_logica
		| {diferente} [l]:exp [r]:exp
		| {maiorq} [l]:exp [r]:exp
		| {menorq} [l]:exp [r]:exp
		| {igual} [l]:exp [r]:exp
		| {maior} [l]:exp [r]:exp
		| {menor} [l]:exp [r]:exp
	;


/*					   		  
	exp_logica
		= {and} exp_logica e log_prec_um {-> New exp_logica.and(exp_logica, log_prec_um.exp_logica)}
		| {ou}  exp_logica ou log_prec_um {-> New exp_logica.ou(exp_logica, log_prec_um.exp_logica)}
		| {xor} exp_logica xor log_prec_um {-> New exp_logica.xor(exp_logica, log_prec_um.exp_logica)}
		| {not} nao log_prec_um {-> log_prec_um.exp_logica}
		| {log_prec_um} log_prec_um {-> log_prec_um.exp_logica};

	log_prec_um  {-> exp_logica}
		= {diferente} exp diferente termo {-> New exp_logica.diferente(exp, termo.exp)}
		| {igual} exp igual termo {-> New exp_logica.igual(exp, termo.exp)}
		| {log_prec_dois} log_prec_dois {-> log_prec_dois.exp_logica};
		
	log_prec_dois  {-> exp_logica}
		= {maior} exp maior termo {-> New exp_logica.maior(exp, termo.exp)}
		| {menor} exp menor termo {-> New exp_logica.menor(exp, termo.exp)}
		| {maiorq} exp maior_igual termo {-> New exp_logica.maiorq(exp, termo.exp)}
		| {menorq} exp menor_igual termo {-> New exp_logica.menorq(exp, termo.exp)}
		| {par} abre_parentesis exp_logica fecha_parentesis {-> exp_logica};
*/