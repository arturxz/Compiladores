Package jah ;

Helpers
	/* BASICOS */
	digitos = ['0' .. '9'];
	letras = ['a' .. 'z'] | ['A' .. 'Z'];
	
	/* CARACTERES ESPECIAIS */
	aspasimples	= ''';
	aspadupla	= '"';
	underline	= '_';
	virgula		= ',';

	/* QUEBRA DE LINHA */
	tab = 9;
	cr = 13;
	lf = 10;
	nl = (cr lf | cr | lf);
	branco = (' ' | '	')+;
	
	/* PARA COMBINACOES */
	menorque	='<';
	maiorque	='>';
	iguala		='=';
	e			='e';
	ou			='ou';
	nao			='nao';
	doispontos	= ':';
	val_bool 	= 'verdadeiro' | 'falso';	
States
	normal,
	comentario_bloco;
	
Tokens
	
	/* PALAVRAS RESERVADAS DO PROGRAMA */
	programa 	= 'programa';
	inicio 		= 'inicio';
	fim 		= 'fim';
	fim_programa= 'fim.';
	leia 		= 'leia';
	escreva 	= 'escreva';
	constante 	= 'constante';
	faca		= 'faca';
	ate			= 'ate';
	de 			= 'de';
	
	/* EXPRESSOES CONDICIONAIS */
	se 		= 'se';
	senao 	= 'senao';
	caso 	= 'caso';
	avalie 	= 'avalie';
	
	/* LOOPS */
	enquanto= 'enquanto';
	para 	= 'para';
	repita	= 'repita';
	
	/* OPERADORES ARITMETICOS */
	soma 	= '+';
	sub 	= '-';
	mult 	= '*';
	div 	= '/';
	
	/* OPERADORES RELACIONAIS */
	maior 		= maiorque;
	menor 		= menorque;
	igual 		= iguala;
	maior_igual = maiorque iguala;
	menor_igual = menorque iguala;
	diferente	= menorque maiorque;
	
	/* OPERADORES BOOLEANOS */
	nao = 'nao';
	e	= 'e';
	ou 	= 'ou';
	xor	= 'xor';
		
	/* TIPOS */
	tipo_inteiro	= 'inteiro';
	tipo_real		= 'real';
	tipo_string		= 'caractere';
	tipo_booleano	= 'bool';
	
	/* OUTROS TOKENS */
	virgula				= virgula;
	ponto				= '.';
	ponto_virgula		= ';';
	dois_pontos			= doispontos;
	abre_parentesis		= '(';
	fecha_parentesis	= ')';
	abre_colchetes		= '[';
	fecha_colchetes		= ']';
	atribuicao			= doispontos iguala;
	aspas_simples		= aspasimples;
	aspas_duplas		= aspadupla;
	nova_linha			= nl;
	tab					= '	';
	espaco				= ' ';
	
	/* ID E VALORES */
	inteiro	= digitos+;
	real	= digitos+ virgula digitos+;
	string	= aspasimples (letras | digitos | branco)+ aspasimples;
	booleano= val_bool;
	id		= (letras | underline) (letras | underline | digitos)*;

	/* COMENTARIOS */
	comentario_linha = '//';
	comentario_bloco_abre = '/*';	
	comentario_bloco_fecha = '*/';

Ignored Tokens
	tab, espaco, nova_linha;

Productions

	mult_comm_ou_zr
		= {um} comm mult_comm_ou_zr
		| {zr} ;
	
	mult_decl_ou_zr
		= {um} decl mult_decl_ou_zr
		| {zr} decl;

	pgr = 
		programa
		id
		inicio
		mult_decl_ou_zr mult_comm_ou_zr
		fim_programa;
	
	/********************************* DECLARACOES *********************************/
	
	decl 
		= {variavel} tipo dois_pontos pos_decl ponto_virgula
		| {constante} constante id valor ponto_virgula;
	
	pos_decl 
		= {com_virgula} var virgula pos_decl
		| {sem_virgula} var;
	
	tipo
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string;
	
	var
		= {normal} id
		| {array} abre_colchetes inteiro fecha_colchetes;
	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real;
	
	/****************************** COMANDOS ******************************/

	comm
		= {comando_normal} var atribuicao exp ponto_virgula
		| {comando_leia} leia abre_parentesis pos_decl fecha_parentesis ponto_virgula
		| {comando_escreva} escreva abre_parentesis pos_exp fecha_parentesis ponto_virgula
		| {comando_se} se abre_parentesis exp_logica fecha_parentesis 
				se_senao
			fim se ponto_virgula
		| {comando_avalie} avalie abre_parentesis exp fecha_parentesis
			avalie_senao
		  fim_avalie
		| {comando_enquanto} enquanto abre_parentesis exp_logica fecha_parentesis faca
			mult_comm_ou_zr comm
		  fim enquanto ponto_virgula
		| {comando_repita} repita
			mult_comm_ou_zr comm
		  ate abre_parentesis exp_logica fecha_parentesis ponto_virgula
		| {comando_para_um} para var de tipo_inteiro ate tipo_inteiro faca 
			mult_comm_ou_zr comm 
		  fim para ponto_virgula
		| {comando_para_dois} para var de tipo_inteiro passo tipo_inteiro ate tipo_inteiro faca
			mult_comm_ou_zr comm
		  fim para ponto_virgula;
	
	se_senao
		= entao mult_comm_ou_zr comm
		| entao mult_comm_ou_zr comm senao mult_comm_ou_zr comm;

	pos_avalie
		= caso valor dois_pontos mult_comm_ou_zr comm;
		
	avalie_senao
		= pos_avalie
		| pos_avalie senao dois_pontos mult_comm_ou_zr comm;
	
	exp
		= valor
		| abre_parentesis exp fecha_parentesis
		| sub exp
		| exp soma exp
		| exp sub exp
		| exp mul exp
		| exp div exp
		| exp_logica;
	
	exp_logica
		= abre_parentesis exp_logica fecha_parentesis
		| exp iguala exp
		| exp diferente exp
		| exp menor_igual exp
		| exp maior_igual exp
		| exp menor exp
		| exp maior exp
		| nao exp_logica
		| exp_logica e exp_logica
		| exp_logica ou exp_logica
		| exp_logica xor exp_logica;
		
	pos_exp 
		= {com_virgula} exp virgula pos_exp
		| {sem_virgula} exp;
		
		
		
		
		
		
		
		
		
		
		
		
		
		