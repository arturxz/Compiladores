Package jah ;

Helpers
	/* BASICOS */
	digitos = ['0' .. '9'];
	letras = ['a' .. 'z'] | ['A' .. 'Z'];
	
	/* CARACTERES ESPECIAIS */
	aspasimples	= ''';
	aspadupla	= '"';
	underline	= '_';
	virgula		= ',';

	/* QUEBRA DE LINHA */
	tab = 9;
	cr = 13;
	lf = 10;
	nl = (cr lf | cr | lf);
	branco = (' ' | '	')+;
	
	/* PARA COMBINACOES */
	menorque	='<';
	maiorque	='>';
	iguala		='=';
	e			='e';
	ou			='ou';
	nao			='nao';
	doispontos	= ':';
	val_bool 	= 'verdadeiro' | 'falso';	
	
Tokens
	
	/* PALAVRAS RESERVADAS DO PROGRAMA */
	programa 	= 'programa';
	inicio 		= 'inicio';
	fim 		= 'fim';
	fim_programa= 'fim.';
	leia 		= 'leia';
	escreva 	= 'escreva';
	constante 	= 'const';
	faca		= 'faca';
	ate			= 'ate';
	de 			= 'de';
	passo		= 'passo';
	senao		= 'senao';
	entao		= 'entao';
	
	/* EXPRESSOES CONDICIONAIS */
	se 		= 'se';
	caso 	= 'caso';
	avalie 	= 'avalie';
	
	/* LOOPS */
	enquanto= 'enquanto';
	para 	= 'para';
	repita	= 'repita';
	
	/* OPERADORES ARITMETICOS */
	soma 	= '+';
	sub 	= '-';
	mult 	= '*';
	div 	= '/';
	
	/* OPERADORES RELACIONAIS */
	maior 		= maiorque;
	menor 		= menorque;
	igual 		= iguala;
	maior_igual = maiorque iguala;
	menor_igual = menorque iguala;
	diferente	= menorque maiorque;
	
	/* OPERADORES BOOLEANOS */
	nao = 'nao';
	e	= 'e';
	ou 	= 'ou';
	xor	= 'xor';
		
	/* TIPOS */
	tipo_inteiro	= 'inteiro';
	tipo_real		= 'real';
	tipo_string		= 'caractere';
	tipo_booleano	= 'booleano';
	
	/* OUTROS TOKENS */
	virgula				= virgula;
	ponto				= '.';
	ponto_virgula		= ';';
	dois_pontos			= doispontos;
	abre_parentesis		= '(';
	fecha_parentesis	= ')';
	abre_colchetes		= '[';
	fecha_colchetes		= ']';
	atribuicao			= doispontos iguala;
	aspas_simples		= aspasimples;
	aspas_duplas		= aspadupla;
	nova_linha			= nl;
	tab					= '	';
	espaco				= ' ';
	
	/* ID E VALORES */
	inteiro	= digitos+;
	real	= digitos+ virgula digitos+;
	string	= aspasimples (letras | digitos | branco)+ aspasimples;
	booleano= val_bool;
	id		= (letras | underline) (letras | underline | digitos)*;

	/* COMENTARIOS */
	comentario_linha = '//';
	comentario_bloco_abre = '/*';	
	comentario_bloco_fecha = '*/';

Ignored Tokens
	tab, espaco, nova_linha;

Productions

	/********************************* GERAL *********************************/
	pgr {-> pgr}
		= {sem_tudo} programa id inicio fim_programa {-> New pgr.sem_tudo(id)}
		| {com_decl} programa id inicio decls fim_programa {-> New pgr.com_decl(id, decls)}
		| {com_comm} programa id inicio comms fim_programa {-> New pgr.com_comm(id, comms)}
		| {com_tudo} programa id inicio decls comms fim_programa {-> New pgr.com_tudo(id, decls, comms)}
	;
		
	// PLURAIS

	decls {-> decls}
		= {multip} decl decls	{-> New decls.multip(decl, decls)}
		| {single} decl			{-> New decls.single(decl)}
	;
	
	comms {-> comms}
		= {multip} comm comms	{-> New comms.multip(comm, comms)}
		| {single} comm			{-> New comms.single(comm)}
	;		
	
	var_list {-> var_list}
		= {multip} var virgula var_list	{-> New var_list.multip(var, var_list)}
		| {single} var					{-> New var_list.single(var)};
		
	/********************************* DECLARACOES *********************************/
		
	decl {-> decl}
		= {variaveis} tipo dois_pontos var_list ponto_virgula 	{-> New decl.variaveis(tipo, var_list)}
		| {constante} constante id valor ponto_virgula 			{-> New decl.constante(id, valor)}
	;
	
	tipo {-> tipo}
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string
	;
	
	var {-> var}
		= {normal} id										{-> New var.normal(id)}
		| {array} id abre_colchetes inteiro fecha_colchetes	{-> New var.array(id, inteiro)}
	;
	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real
	;
	
	/****************************** COMANDOS ******************************/

	comm {-> comm  } 
		= {simples} var atribuicao exp ponto_virgula 	{-> New comm.simples(var, exp)}
		| {leia} comm_leia 								{-> New comm.leia(comm_leia)}
		| {escreva} comm_escreva 						{-> New comm.escreva(comm_escreva)}
		| {se} comm_se 									{-> New comm.se(comm_se)}
		| {avalie} comm_avalie 							{-> New comm.avalie(comm_avalie)}
		| {enquanto} comm_enquanto 						{-> New comm.enquanto(comm_enquanto)}
		| {repita} comm_repita 							{-> New comm.repita(comm_repita)}
		| {para} comm_para 								{-> New comm.para(comm_para)}
	;
	
	// ########## COMANDO LEIA
	comm_leia {-> comm_leia}
		= leia abre_parentesis comm_leia_segunda_parte {-> New comm_leia.nada()}
	;
	comm_leia_segunda_parte {-> comm_leia}
		= {varios_var} var virgula comm_leia_segunda_parte	{-> New comm_leia.algo(var, comm_leia_segunda_parte.comm_leia)} 
		| {um_var} var comm_leia_terceira_parte 			{-> New comm_leia.algo(var, comm_leia_terceira_parte.comm_leia)}
	;
	comm_leia_terceira_parte {-> comm_leia}
		= fecha_parentesis ponto_virgula {-> New comm_leia.nada()}
	;

	// ########## COMANDO ESCREVA
	comm_escreva {-> comm_escreva}
		= escreva abre_parentesis comm_escreva_segunda_parte {-> New comm_escreva.nada()}
	;
	comm_escreva_segunda_parte  {-> comm_escreva}
		= {varios_exp_ari} exp virgula comm_escreva_segunda_parte 			{-> New comm_escreva.algo_exp_ari(exp, comm_escreva_segunda_parte.comm_escreva)} 
		| {varios_exp_log} exp_logica virgula comm_escreva_segunda_parte 	{-> New comm_escreva.algo_exp_log(exp_logica, comm_escreva_segunda_parte.comm_escreva)} 
		| {um_exp_ari} exp comm_escreva_terceira_parte						{-> New comm_escreva.algo_exp_ari(exp, comm_escreva_terceira_parte.comm_escreva)}
		| {um_exp_log} exp_logica comm_escreva_terceira_parte				{-> New comm_escreva.algo_exp_log(exp_logica, comm_escreva_terceira_parte.comm_escreva)}
	;
	comm_escreva_terceira_parte {-> comm_escreva}
		= fecha_parentesis ponto_virgula {-> New comm_escreva.nada()}
	;

	// ########## COMANDO SE
	comm_se {-> comm_se} 
		= {com_senao} se abre_parentesis exp_logica fecha_parentesis entao comms comm_se_senao comm_se_fim	{-> New comm_se.com_senao(exp_logica, comms, comm_se_senao)}
		| {sem_senao} se abre_parentesis exp_logica fecha_parentesis entao comms comm_se_fim				{-> New comm_se.sem_senao(exp_logica, comms)}
	;
	comm_se_senao {-> comm_se_senao} 
		= senao comms {-> New comm_se_senao(comms)}
	;
	comm_se_fim = fim se ponto_virgula;

	// ########## COMANDO AVALIE
	comm_avalie {-> comm_avalie}
		= {exp_ari} avalie abre_parentesis exp fecha_parentesis comm_avalie_caso_parte 			{-> New comm_avalie.exp_ari(exp, comm_avalie_caso_parte)}
		| {exp_log} avalie abre_parentesis exp_logica fecha_parentesis comm_avalie_caso_parte	{-> New comm_avalie.exp_log(exp_logica, comm_avalie_caso_parte)}
	;
	comm_avalie_caso_parte {-> comm_avalie_caso_parte}
		= {com_caso} caso valor dois_pontos comms comm_avalie_caso_parte	{-> New comm_avalie_caso_parte.com_caso(valor, comms, comm_avalie_caso_parte)}
		| {sem_caso} comm_avalie_senao_parte								{-> New comm_avalie_caso_parte.sem_caso(comm_avalie_senao_parte)}
	;
	comm_avalie_senao_parte {-> comm_avalie_senao_parte}
		= {com_senao} senao dois_pontos comms comm_avalie_fim 	{-> New comm_avalie_senao_parte.com_senao(comms)}
		| {sem_senao} comm_avalie_fim							{-> New comm_avalie_senao_parte.sem_senao()}
	;
	comm_avalie_fim {-> comm_avalie_senao_parte}
		= fim avalie ponto_virgula {-> New comm_avalie_senao_parte.sem_senao()}
	;
	
	// ########## COMANDO ENQUANTO
	comm_enquanto {-> comm_enquanto}
		= enquanto abre_parentesis exp_logica fecha_parentesis faca comms comm_enquanto_fim {-> New comm_enquanto(exp_logica, comms)}
	;
	comm_enquanto_fim {-> comm_enquanto_fim}
		= fim enquanto ponto_virgula {-> New comm_enquanto_fim()}
	;
	
	// ########## COMANDO REPITA
	comm_repita {-> comm_repita}
		= repita comm_repita_comms_parte {-> New comm_repita(comm_repita_comms_parte)}
	;
	comm_repita_comms_parte {-> comm_repita_comms_parte}
		= comms ate comm_repita_condicao_parte {-> New comm_repita_comms_parte(comms, comm_repita_condicao_parte)}
	;
	comm_repita_condicao_parte {-> comm_repita_condicao_parte}
		= abre_parentesis exp_logica fecha_parentesis ponto_virgula {-> New comm_repita_condicao_parte(exp_logica)}
	;
	
	// ########## COMANDO PARA
/*	comm_para = para var de inteiro comm_para_passa;
	comm_para_passa 
		= {com_passo} passo inteiro comm_para_ate
		| {sem_passo} comm_para_ate;
	comm_para_ate = ate inteiro comm_para_meio;
	comm_para_meio = faca comms comm_para_fim;
	comm_para_fim = fim para ponto_virgula;
*/	
	// #################### EXPRESSOES
/*	exp_ou_exp_logica {-> exp_ou_exp_logica}
		= {ari} exp			{-> New exp_ou_exp_logica.ari(exp)}
		| {log} exp_logica	{-> New exp_ou_exp_logica.log(exp_logica)}
	;
*/

	exp 
		= {soma} exp soma termo 
		| {subt} exp sub termo
		| {term} termo
	;
			
	termo 
		= {mult} termo mult exp_final 
		| {divi} termo div exp_final
		| {fim} exp_final
	;
	
	exp_final 
		= {parentesis} abre_parentesis exp fecha_parentesis  
		| {negativa_exp} sub exp_final
		| {substituir_var} var
		| {substituir_val} valor
	;
					   		  
	exp_logica 
		= {and} exp_logica e log_prec_um
		| {ou}  exp_logica ou log_prec_um
		| {xor} exp_logica xor log_prec_um
		| {not} nao log_prec_um
		| {prx} log_prec_um
	;

	log_prec_um 
		= {diferente} exp diferente termo
		| {igual} exp igual termo
		| {fator} log_prec_dois
	;
		
	log_prec_dois 
		= {maior} exp maior termo
		| {menor} exp menor termo
		| {maiorq} exp maior_igual termo
		| {menorq} exp menor_igual termo
		| {par} abre_parentesis exp_logica fecha_parentesis
	;

Abstract Syntax Tree

	pgr
		= {sem_tudo} id
		| {com_decl} id decls 
		| {com_comm} id comms 
		| {com_tudo} id decls comms
	;
	decls
		= {multip} decl decls
		| {single} decl
	;
	
	decl
		= {variaveis} tipo var_list
		| {constante} id valor;
	
	var_list
		= {multip} var var_list
		| {single} var
	;
	
	var
		= {normal} id
		| {array} id inteiro
	;
	
	tipo
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string
	;
	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real
	;
	
	comms
		= {multip} comm comms
		| {single} comm;
	
    comm
	    = {simples} var exp
	    | {leia} comm_leia
	    | {escreva} comm_escreva 
	    | {se} comm_se
	    | {avalie} comm_avalie 
	    | {enquanto} comm_enquanto 
	    | {repita} comm_repita 
	    | {para} comm_para 
    ;

	comm_leia
		= {algo} var comm_leia
		| {nada}
	;
	
	comm_escreva
		= {algo_exp_ari} exp comm_escreva
		| {algo_exp_log} exp_logica comm_escreva
		| {nada} 
	;

	comm_se 
		= {com_senao} exp_logica comms comm_se_senao
		| {sem_senao} exp_logica comms			
	;
	
	comm_se_senao 
		= comms
	;

	comm_avalie 
		= {exp_ari} exp comm_avalie_caso_parte
		| {exp_log} exp_logica comm_avalie_caso_parte
	;
	
	comm_avalie_caso_parte 
		= {com_caso} valor comms comm_avalie_caso_parte 
		| {sem_caso} comm_avalie_senao_parte
	;
	
	comm_avalie_senao_parte
		= {com_senao} comms
		| {sem_senao} 
	;
	
	comm_enquanto
		= exp_logica comms
	;
	
	comm_enquanto_fim = ;

	comm_repita 
		= comm_repita_comms_parte 
	;

	comm_repita_comms_parte 
		= comms comm_repita_condicao_parte
	;
	
	comm_repita_condicao_parte
		= exp_logica
	;

	comm_para
		= var inteiro comm_para_passa 
	;
	
	comm_para_passa
		= {com_passo} inteiro comm_para_ate
		| {sem_passo} comm_para_ate
	;
	
	comm_para_ate 
		= inteiro comm_para_meio 
	;
	
	comm_para_meio 
		= comms
	;

	exp_ou_exp_logica
		= {ari} exp
		| {log} exp_logica
	;


	exp 
		= {soma} [l]:exp [r]:exp
		| {subt} [l]:exp [r]:exp
		| {mult} [l]:exp [r]:exp
		| {divi} [l]:exp [r]:exp
		| {var} var
		| {valor} valor
	;

	exp_logica
		= {not} exp_logica
		| {ou}  [l]:exp_logica [r]:exp_logica
		| {and} [l]:exp_logica [r]:exp_logica
		| {xor} [l]:exp_logica [r]:exp_logica
		| {diferente} 	[l]:exp [r]:exp
		| {maiorq} 		[l]:exp [r]:exp
		| {menorq} 		[l]:exp [r]:exp
		| {igual} 		[l]:exp [r]:exp
		| {maior} 		[l]:exp [r]:exp
		| {menor} 		[l]:exp [r]:exp
	;

/*
	pgr 
		= id [decl]:decl* [comm]:comm*
	;
	
	
	decl
		= {variavel} [l]:tipo [r]:var*
		| {constante} constante id [r]:valor
	;
	
	var_list
		= {multip} [arg]:var [rest]:var_list
		| {single} [arg]:var;
	
	tipo
		= {real} tipo_real
		| {inteiro} tipo_inteiro
		| {string} tipo_string
	;
	
	var
		= {normal} id
		| {array} [l]:id [r]:inteiro
	;
	

	
	valor
		= {string} string 
		| {inteiro} inteiro 
		| {real} real
	;
	
	comm 
		= {leia} var+
		| {escreva} exp+
		| {se} exp_logica comm+ senao_parte?
		| {avalie} exp caso_parte* senao_parte?
		| {enquanto} exp_logica comm+
		| {repita} comm+ exp_logica
		| {para} var [intini]:tipo_inteiro passo_parte? [intfim]:tipo_inteiro comm+
	;
	
	caso_parte
		= {caso} [l]:valor [r]:comm
	;
		
	senao_parte
		= {senao} comm+
	;
	
	passo_parte
		= {passo} tipo_inteiro
	;
	
	exp 
		= {soma} [l]:exp [r]:exp
		| {subt} [l]:exp [r]:exp
		| {mult} [l]:exp [r]:exp
		| {divi} [l]:exp [r]:exp
		| {var} var
		| {valor} valor
	;

	exp_logica
		= {not} exp_logica
		| {ou}  [l]:exp_logica [r]:exp_logica
		| {and} [l]:exp_logica [r]:exp_logica
		| {xor} [l]:exp_logica [r]:exp_logica
		| {diferente} 	[l]:exp [r]:exp
		| {maiorq} 		[l]:exp [r]:exp
		| {menorq} 		[l]:exp [r]:exp
		| {igual} 		[l]:exp [r]:exp
		| {maior} 		[l]:exp [r]:exp
		| {menor} 		[l]:exp [r]:exp
	;


			   		  
	exp_logica
		= {and} exp_logica e log_prec_um {-> New exp_logica.and(exp_logica, log_prec_um.exp_logica)}
		| {ou}  exp_logica ou log_prec_um {-> New exp_logica.ou(exp_logica, log_prec_um.exp_logica)}
		| {xor} exp_logica xor log_prec_um {-> New exp_logica.xor(exp_logica, log_prec_um.exp_logica)}
		| {not} nao log_prec_um {-> log_prec_um.exp_logica}
		| {log_prec_um} log_prec_um {-> log_prec_um.exp_logica};

	log_prec_um  {-> exp_logica}
		= {diferente} exp diferente termo {-> New exp_logica.diferente(exp, termo.exp)}
		| {igual} exp igual termo {-> New exp_logica.igual(exp, termo.exp)}
		| {log_prec_dois} log_prec_dois {-> log_prec_dois.exp_logica};
		
	log_prec_dois  {-> exp_logica}
		= {maior} exp maior termo {-> New exp_logica.maior(exp, termo.exp)}
		| {menor} exp menor termo {-> New exp_logica.menor(exp, termo.exp)}
		| {maiorq} exp maior_igual termo {-> New exp_logica.maiorq(exp, termo.exp)}
		| {menorq} exp menor_igual termo {-> New exp_logica.menorq(exp, termo.exp)}
		| {par} abre_parentesis exp_logica fecha_parentesis {-> exp_logica};
*/