/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.analysis;

import jah.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPgrInicio(APgrInicio node);
    void caseAComDeclPgrDeclParte(AComDeclPgrDeclParte node);
    void caseASemDeclPgrDeclParte(ASemDeclPgrDeclParte node);
    void caseAComCommPgrCommParte(AComCommPgrCommParte node);
    void caseASemCommPgrCommParte(ASemCommPgrCommParte node);
    void caseAPgrFinal(APgrFinal node);
    void caseAVariavelDecl(AVariavelDecl node);
    void caseAConstanteDecl(AConstanteDecl node);
    void caseAComVirgulaPosDecl(AComVirgulaPosDecl node);
    void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseAStringTipo(AStringTipo node);
    void caseANormalVar(ANormalVar node);
    void caseAArrayVar(AArrayVar node);
    void caseAStringValor(AStringValor node);
    void caseAInteiroValor(AInteiroValor node);
    void caseARealValor(ARealValor node);
    void caseAMaisComandosComandos(AMaisComandosComandos node);
    void caseAComandoVazioComandos(AComandoVazioComandos node);
    void caseASimplesComm(ASimplesComm node);
    void caseALeiaComm(ALeiaComm node);
    void caseAEscrevaComm(AEscrevaComm node);
    void caseASeComm(ASeComm node);
    void caseAAvalieComm(AAvalieComm node);
    void caseAEnquantoComm(AEnquantoComm node);
    void caseARepitaComm(ARepitaComm node);
    void caseAParaComm(AParaComm node);
    void caseACommLeia(ACommLeia node);
    void caseAVariosExpCommLeiaSegundaParte(AVariosExpCommLeiaSegundaParte node);
    void caseAUmExpCommLeiaSegundaParte(AUmExpCommLeiaSegundaParte node);
    void caseACommLeiaTerceiraParte(ACommLeiaTerceiraParte node);
    void caseACommEscreva(ACommEscreva node);
    void caseAVariosExpCommEscrevaSegundaParte(AVariosExpCommEscrevaSegundaParte node);
    void caseAUmExpCommEscrevaSegundaParte(AUmExpCommEscrevaSegundaParte node);
    void caseACommEscrevaTerceiraParte(ACommEscrevaTerceiraParte node);
    void caseACommSe(ACommSe node);
    void caseACommSeSenao(ACommSeSenao node);
    void caseACommSeFim(ACommSeFim node);
    void caseACommAvalie(ACommAvalie node);
    void caseAComCasoCommAvalieCasoParte(AComCasoCommAvalieCasoParte node);
    void caseASemCasoCommAvalieCasoParte(ASemCasoCommAvalieCasoParte node);
    void caseAComSenaoCommAvalieSenaoParte(AComSenaoCommAvalieSenaoParte node);
    void caseASemSenaoCommAvalieSenaoParte(ASemSenaoCommAvalieSenaoParte node);
    void caseACommAvalieFim(ACommAvalieFim node);
    void caseACommEnquanto(ACommEnquanto node);
    void caseACommEnquantoFim(ACommEnquantoFim node);
    void caseACommRepita(ACommRepita node);
    void caseACommRepitaComandosParte(ACommRepitaComandosParte node);
    void caseACommRepitaCondicaoParte(ACommRepitaCondicaoParte node);
    void caseACommPara(ACommPara node);
    void caseAComPassoCommParaPassa(AComPassoCommParaPassa node);
    void caseASemPassoCommParaPassa(ASemPassoCommParaPassa node);
    void caseACommParaAte(ACommParaAte node);
    void caseACommParaMeio(ACommParaMeio node);
    void caseACommParaFim(ACommParaFim node);
    void caseAOperacaoExp(AOperacaoExp node);
    void caseAProximoExp(AProximoExp node);
    void caseAOperacaoTermo(AOperacaoTermo node);
    void caseAProximoTermo(AProximoTermo node);
    void caseAParentesisFator(AParentesisFator node);
    void caseASubstituiIdFator(ASubstituiIdFator node);
    void caseASubstituiValorFator(ASubstituiValorFator node);
    void caseAFazCompExpLogica(AFazCompExpLogica node);
    void caseADesigualExpLogica(ADesigualExpLogica node);
    void caseAFazDesDesLogica(AFazDesDesLogica node);
    void caseAOprsDesLogica(AOprsDesLogica node);
    void caseAOpLogicoOprLogica(AOpLogicoOprLogica node);
    void caseAFinalizaOprLogica(AFinalizaOprLogica node);
    void caseAParentesisFimLogica(AParentesisFimLogica node);
    void caseASubstituiVarFimLogica(ASubstituiVarFimLogica node);
    void caseASubstituiValorFimLogica(ASubstituiValorFimLogica node);
    void caseASomaExpAritPriUm(ASomaExpAritPriUm node);
    void caseASubtracaoExpAritPriUm(ASubtracaoExpAritPriUm node);
    void caseAMultiplicacaoExpAritPriDois(AMultiplicacaoExpAritPriDois node);
    void caseADivisaoExpAritPriDois(ADivisaoExpAritPriDois node);
    void caseALogicoExpAritPriDois(ALogicoExpAritPriDois node);
    void caseAIgualExpLogPriUm(AIgualExpLogPriUm node);
    void caseADiferenteExpLogPriUm(ADiferenteExpLogPriUm node);
    void caseAMenorExpLogPriDois(AMenorExpLogPriDois node);
    void caseAMenorigualExpLogPriDois(AMenorigualExpLogPriDois node);
    void caseAMaiorExpLogPriDois(AMaiorExpLogPriDois node);
    void caseAMaiorigualExpLogPriDois(AMaiorigualExpLogPriDois node);
    void caseANotExpLogPriTres(ANotExpLogPriTres node);
    void caseAAndExpLogPriTres(AAndExpLogPriTres node);
    void caseAOrExpLogPriTres(AOrExpLogPriTres node);
    void caseAXorExpLogPriTres(AXorExpLogPriTres node);

    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTFimPrograma(TFimPrograma node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTConstante(TConstante node);
    void caseTFaca(TFaca node);
    void caseTAte(TAte node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTSenao(TSenao node);
    void caseTEntao(TEntao node);
    void caseTSe(TSe node);
    void caseTCaso(TCaso node);
    void caseTAvalie(TAvalie node);
    void caseTEnquanto(TEnquanto node);
    void caseTPara(TPara node);
    void caseTRepita(TRepita node);
    void caseTSoma(TSoma node);
    void caseTSub(TSub node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTIgual(TIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTDiferente(TDiferente node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTTipoInteiro(TTipoInteiro node);
    void caseTTipoReal(TTipoReal node);
    void caseTTipoString(TTipoString node);
    void caseTTipoBooleano(TTipoBooleano node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTAbreParentesis(TAbreParentesis node);
    void caseTFechaParentesis(TFechaParentesis node);
    void caseTAbreColchetes(TAbreColchetes node);
    void caseTFechaColchetes(TFechaColchetes node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTAspasSimples(TAspasSimples node);
    void caseTAspasDuplas(TAspasDuplas node);
    void caseTNovaLinha(TNovaLinha node);
    void caseTTab(TTab node);
    void caseTEspaco(TEspaco node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTString(TString node);
    void caseTBooleano(TBooleano node);
    void caseTId(TId node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBlocoAbre(TComentarioBlocoAbre node);
    void caseTComentarioBlocoFecha(TComentarioBlocoFecha node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
