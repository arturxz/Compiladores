/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.analysis;

import jah.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPgrInicio(APgrInicio node);
    void caseAMaisDeclsDecls(AMaisDeclsDecls node);
    void caseAUltimaDeclDecls(AUltimaDeclDecls node);
    void caseAVariavelDecl(AVariavelDecl node);
    void caseAConstanteDecl(AConstanteDecl node);
    void caseAComVirgulaPosDecl(AComVirgulaPosDecl node);
    void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseAStringTipo(AStringTipo node);
    void caseANormalVar(ANormalVar node);
    void caseAArrayVar(AArrayVar node);
    void caseAStringValor(AStringValor node);
    void caseAInteiroValor(AInteiroValor node);
    void caseARealValor(ARealValor node);
    void caseAMaisComandosComandos(AMaisComandosComandos node);
    void caseAUltimoComandoComandos(AUltimoComandoComandos node);
    void caseASimplesComm(ASimplesComm node);
    void caseALeiaComm(ALeiaComm node);
    void caseAEscrevaComm(AEscrevaComm node);
    void caseASeComm(ASeComm node);
    void caseAAvalieComm(AAvalieComm node);
    void caseAEnquantoComm(AEnquantoComm node);
    void caseARepitaComm(ARepitaComm node);
    void caseAParaComm(AParaComm node);
    void caseACommLeia(ACommLeia node);
    void caseAVariosExpCommLeiaSegundaParte(AVariosExpCommLeiaSegundaParte node);
    void caseAUmExpCommLeiaSegundaParte(AUmExpCommLeiaSegundaParte node);
    void caseACommLeiaTerceiraParte(ACommLeiaTerceiraParte node);
    void caseACommEscreva(ACommEscreva node);
    void caseAVariosExpCommEscrevaSegundaParte(AVariosExpCommEscrevaSegundaParte node);
    void caseAUmExpCommEscrevaSegundaParte(AUmExpCommEscrevaSegundaParte node);
    void caseACommEscrevaTerceiraParte(ACommEscrevaTerceiraParte node);
    void caseACommSe(ACommSe node);
    void caseACommSeSenao(ACommSeSenao node);
    void caseACommSeFim(ACommSeFim node);
    void caseACommAvalie(ACommAvalie node);
    void caseAComCasoCommAvalieCasoParte(AComCasoCommAvalieCasoParte node);
    void caseASemCasoCommAvalieCasoParte(ASemCasoCommAvalieCasoParte node);
    void caseAComSenaoCommAvalieSenaoParte(AComSenaoCommAvalieSenaoParte node);
    void caseASemSenaoCommAvalieSenaoParte(ASemSenaoCommAvalieSenaoParte node);
    void caseACommAvalieFim(ACommAvalieFim node);
    void caseACommEnquanto(ACommEnquanto node);
    void caseACommEnquantoFim(ACommEnquantoFim node);
    void caseACommRepita(ACommRepita node);
    void caseACommRepitaComandosParte(ACommRepitaComandosParte node);
    void caseACommRepitaCondicaoParte(ACommRepitaCondicaoParte node);
    void caseACommPara(ACommPara node);
    void caseAComPassoCommParaPassa(AComPassoCommParaPassa node);
    void caseASemPassoCommParaPassa(ASemPassoCommParaPassa node);
    void caseACommParaAte(ACommParaAte node);
    void caseACommParaMeio(ACommParaMeio node);
    void caseACommParaFim(ACommParaFim node);
    void caseAAriExpOuExpLogica(AAriExpOuExpLogica node);
    void caseALogExpOuExpLogica(ALogExpOuExpLogica node);
    void caseASomaExp(ASomaExp node);
    void caseASubtExp(ASubtExp node);
    void caseATermExp(ATermExp node);
    void caseAMultTermo(AMultTermo node);
    void caseADiviTermo(ADiviTermo node);
    void caseAFimTermo(AFimTermo node);
    void caseAParentesisExpFinal(AParentesisExpFinal node);
    void caseANegativaExpExpFinal(ANegativaExpExpFinal node);
    void caseASubstituirVarExpFinal(ASubstituirVarExpFinal node);
    void caseASubstituirValExpFinal(ASubstituirValExpFinal node);
    void caseAAndExpLogica(AAndExpLogica node);
    void caseAOuExpLogica(AOuExpLogica node);
    void caseAXorExpLogica(AXorExpLogica node);
    void caseANotExpLogica(ANotExpLogica node);
    void caseAPrxExpLogica(APrxExpLogica node);
    void caseADiferenteLogPrecUm(ADiferenteLogPrecUm node);
    void caseAIgualLogPrecUm(AIgualLogPrecUm node);
    void caseAFatorLogPrecUm(AFatorLogPrecUm node);
    void caseAMaiorLogPrecDois(AMaiorLogPrecDois node);
    void caseAMenorLogPrecDois(AMenorLogPrecDois node);
    void caseAMaiorqLogPrecDois(AMaiorqLogPrecDois node);
    void caseAMenorqLogPrecDois(AMenorqLogPrecDois node);
    void caseAParLogPrecDois(AParLogPrecDois node);

    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFim(TFim node);
    void caseTFimPrograma(TFimPrograma node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTConstante(TConstante node);
    void caseTFaca(TFaca node);
    void caseTAte(TAte node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTSenao(TSenao node);
    void caseTEntao(TEntao node);
    void caseTSe(TSe node);
    void caseTCaso(TCaso node);
    void caseTAvalie(TAvalie node);
    void caseTEnquanto(TEnquanto node);
    void caseTPara(TPara node);
    void caseTRepita(TRepita node);
    void caseTSoma(TSoma node);
    void caseTSub(TSub node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMaior(TMaior node);
    void caseTMenor(TMenor node);
    void caseTIgual(TIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTDiferente(TDiferente node);
    void caseTNao(TNao node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTTipoInteiro(TTipoInteiro node);
    void caseTTipoReal(TTipoReal node);
    void caseTTipoString(TTipoString node);
    void caseTTipoBooleano(TTipoBooleano node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTAbreParentesis(TAbreParentesis node);
    void caseTFechaParentesis(TFechaParentesis node);
    void caseTAbreColchetes(TAbreColchetes node);
    void caseTFechaColchetes(TFechaColchetes node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTAspasSimples(TAspasSimples node);
    void caseTAspasDuplas(TAspasDuplas node);
    void caseTNovaLinha(TNovaLinha node);
    void caseTTab(TTab node);
    void caseTEspaco(TEspaco node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTString(TString node);
    void caseTBooleano(TBooleano node);
    void caseTId(TId node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBlocoAbre(TComentarioBlocoAbre node);
    void caseTComentarioBlocoFecha(TComentarioBlocoFecha node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
