/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.analysis;

import java.util.*;
import jah.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPgr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPgr(APgr node)
    {
        defaultIn(node);
    }

    public void outAPgr(APgr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgr(APgr node)
    {
        inAPgr(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        outAPgr(node);
    }

    public void inAVariavelDecl(AVariavelDecl node)
    {
        defaultIn(node);
    }

    public void outAVariavelDecl(AVariavelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDecl(AVariavelDecl node)
    {
        inAVariavelDecl(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVariavelDecl(node);
    }

    public void inAConstanteDecl(AConstanteDecl node)
    {
        defaultIn(node);
    }

    public void outAConstanteDecl(AConstanteDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDecl(AConstanteDecl node)
    {
        inAConstanteDecl(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAConstanteDecl(node);
    }

    public void inAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        inAComVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        outAComVirgulaPosDecl(node);
    }

    public void inASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        inASemVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASemVirgulaPosDecl(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inAStringTipo(AStringTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipo(AStringTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipo(AStringTipo node)
    {
        inAStringTipo(node);
        if(node.getTipoString() != null)
        {
            node.getTipoString().apply(this);
        }
        outAStringTipo(node);
    }

    public void inANormalVar(ANormalVar node)
    {
        defaultIn(node);
    }

    public void outANormalVar(ANormalVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalVar(ANormalVar node)
    {
        inANormalVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANormalVar(node);
    }

    public void inAArrayVar(AArrayVar node)
    {
        defaultIn(node);
    }

    public void outAArrayVar(AArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        inAArrayVar(node);
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        outAArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealValor(node);
    }
}
