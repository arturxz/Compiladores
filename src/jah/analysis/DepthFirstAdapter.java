/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.analysis;

import java.util.*;
import jah.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPgr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPgr(APgr node)
    {
        defaultIn(node);
    }

    public void outAPgr(APgr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgr(APgr node)
    {
        inAPgr(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComm> copy = new ArrayList<PComm>(node.getComm());
            for(PComm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        outAPgr(node);
    }

    public void inAVariavelDecl(AVariavelDecl node)
    {
        defaultIn(node);
    }

    public void outAVariavelDecl(AVariavelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDecl(AVariavelDecl node)
    {
        inAVariavelDecl(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVariavelDecl(node);
    }

    public void inAConstanteDecl(AConstanteDecl node)
    {
        defaultIn(node);
    }

    public void outAConstanteDecl(AConstanteDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDecl(AConstanteDecl node)
    {
        inAConstanteDecl(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAConstanteDecl(node);
    }

    public void inAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        inAComVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        outAComVirgulaPosDecl(node);
    }

    public void inASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        inASemVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASemVirgulaPosDecl(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inAStringTipo(AStringTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipo(AStringTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipo(AStringTipo node)
    {
        inAStringTipo(node);
        if(node.getTipoString() != null)
        {
            node.getTipoString().apply(this);
        }
        outAStringTipo(node);
    }

    public void inANormalVar(ANormalVar node)
    {
        defaultIn(node);
    }

    public void outANormalVar(ANormalVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalVar(ANormalVar node)
    {
        inANormalVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANormalVar(node);
    }

    public void inAArrayVar(AArrayVar node)
    {
        defaultIn(node);
    }

    public void outAArrayVar(AArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        inAArrayVar(node);
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        outAArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAApenasUmComandoMultiplosComm(AApenasUmComandoMultiplosComm node)
    {
        defaultIn(node);
    }

    public void outAApenasUmComandoMultiplosComm(AApenasUmComandoMultiplosComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApenasUmComandoMultiplosComm(AApenasUmComandoMultiplosComm node)
    {
        inAApenasUmComandoMultiplosComm(node);
        if(node.getComm() != null)
        {
            node.getComm().apply(this);
        }
        outAApenasUmComandoMultiplosComm(node);
    }

    public void inAMaisDeUmComandoMultiplosComm(AMaisDeUmComandoMultiplosComm node)
    {
        defaultIn(node);
    }

    public void outAMaisDeUmComandoMultiplosComm(AMaisDeUmComandoMultiplosComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisDeUmComandoMultiplosComm(AMaisDeUmComandoMultiplosComm node)
    {
        inAMaisDeUmComandoMultiplosComm(node);
        if(node.getComm() != null)
        {
            node.getComm().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        outAMaisDeUmComandoMultiplosComm(node);
    }

    public void inAComandoNormalComm(AComandoNormalComm node)
    {
        defaultIn(node);
    }

    public void outAComandoNormalComm(AComandoNormalComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoNormalComm(AComandoNormalComm node)
    {
        inAComandoNormalComm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoNormalComm(node);
    }

    public void inAComandoLeiaComm(AComandoLeiaComm node)
    {
        defaultIn(node);
    }

    public void outAComandoLeiaComm(AComandoLeiaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeiaComm(AComandoLeiaComm node)
    {
        inAComandoLeiaComm(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoLeiaComm(node);
    }

    public void inAComandoEscrevaComm(AComandoEscrevaComm node)
    {
        defaultIn(node);
    }

    public void outAComandoEscrevaComm(AComandoEscrevaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEscrevaComm(AComandoEscrevaComm node)
    {
        inAComandoEscrevaComm(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getPosExpComm() != null)
        {
            node.getPosExpComm().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoEscrevaComm(node);
    }

    public void inAComandoSeComm(AComandoSeComm node)
    {
        defaultIn(node);
    }

    public void outAComandoSeComm(AComandoSeComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeComm(AComandoSeComm node)
    {
        inAComandoSeComm(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getSeSenao() != null)
        {
            node.getSeSenao().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoSeComm(node);
    }

    public void inAComandoAvalieComm(AComandoAvalieComm node)
    {
        defaultIn(node);
    }

    public void outAComandoAvalieComm(AComandoAvalieComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAvalieComm(AComandoAvalieComm node)
    {
        inAComandoAvalieComm(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getAvalieSenao() != null)
        {
            node.getAvalieSenao().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        outAComandoAvalieComm(node);
    }

    public void inAComandoEnquantoComm(AComandoEnquantoComm node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoComm(AComandoEnquantoComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoComm(AComandoEnquantoComm node)
    {
        inAComandoEnquantoComm(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoEnquantoComm(node);
    }

    public void inAComandoRepitaComm(AComandoRepitaComm node)
    {
        defaultIn(node);
    }

    public void outAComandoRepitaComm(AComandoRepitaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepitaComm(AComandoRepitaComm node)
    {
        inAComandoRepitaComm(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoRepitaComm(node);
    }

    public void inAComandoParaIteraComm(AComandoParaIteraComm node)
    {
        defaultIn(node);
    }

    public void outAComandoParaIteraComm(AComandoParaIteraComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaIteraComm(AComandoParaIteraComm node)
    {
        inAComandoParaIteraComm(node);
        if(node.getInicioPara() != null)
        {
            node.getInicioPara().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoParaIteraComm(node);
    }

    public void inAComandoParaPassaComm(AComandoParaPassaComm node)
    {
        defaultIn(node);
    }

    public void outAComandoParaPassaComm(AComandoParaPassaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaPassaComm(AComandoParaPassaComm node)
    {
        inAComandoParaPassaComm(node);
        if(node.getInicioPara() != null)
        {
            node.getInicioPara().apply(this);
        }
        if(node.getPassoPara() != null)
        {
            node.getPassoPara().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAComandoParaPassaComm(node);
    }

    public void inAFimSe(AFimSe node)
    {
        defaultIn(node);
    }

    public void outAFimSe(AFimSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFimSe(AFimSe node)
    {
        inAFimSe(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAFimSe(node);
    }

    public void inAFimEnquanto(AFimEnquanto node)
    {
        defaultIn(node);
    }

    public void outAFimEnquanto(AFimEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFimEnquanto(AFimEnquanto node)
    {
        inAFimEnquanto(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAFimEnquanto(node);
    }

    public void inAInicioPara(AInicioPara node)
    {
        defaultIn(node);
    }

    public void outAInicioPara(AInicioPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicioPara(AInicioPara node)
    {
        inAInicioPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInicioPara(node);
    }

    public void inAPassoPara(APassoPara node)
    {
        defaultIn(node);
    }

    public void outAPassoPara(APassoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassoPara(APassoPara node)
    {
        inAPassoPara(node);
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAPassoPara(node);
    }

    public void inAFimPara(AFimPara node)
    {
        defaultIn(node);
    }

    public void outAFimPara(AFimPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFimPara(AFimPara node)
    {
        inAFimPara(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAFimPara(node);
    }

    public void inAFimSimplesFimAvalie(AFimSimplesFimAvalie node)
    {
        defaultIn(node);
    }

    public void outAFimSimplesFimAvalie(AFimSimplesFimAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFimSimplesFimAvalie(AFimSimplesFimAvalie node)
    {
        inAFimSimplesFimAvalie(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAFimSimplesFimAvalie(node);
    }

    public void inASennaoFimFimAvalie(ASennaoFimFimAvalie node)
    {
        defaultIn(node);
    }

    public void outASennaoFimFimAvalie(ASennaoFimFimAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASennaoFimFimAvalie(ASennaoFimFimAvalie node)
    {
        inASennaoFimFimAvalie(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outASennaoFimFimAvalie(node);
    }

    public void inADentroSeSimplesSeSenao(ADentroSeSimplesSeSenao node)
    {
        defaultIn(node);
    }

    public void outADentroSeSimplesSeSenao(ADentroSeSimplesSeSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADentroSeSimplesSeSenao(ADentroSeSimplesSeSenao node)
    {
        inADentroSeSimplesSeSenao(node);
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        outADentroSeSimplesSeSenao(node);
    }

    public void inADentroSeSenaoSeSenao(ADentroSeSenaoSeSenao node)
    {
        defaultIn(node);
    }

    public void outADentroSeSenaoSeSenao(ADentroSeSenaoSeSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADentroSeSenaoSeSenao(ADentroSeSenaoSeSenao node)
    {
        inADentroSeSenaoSeSenao(node);
        if(node.getComm() != null)
        {
            node.getComm().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        outADentroSeSenaoSeSenao(node);
    }

    public void inACasoPosAvalie(ACasoPosAvalie node)
    {
        defaultIn(node);
    }

    public void outACasoPosAvalie(ACasoPosAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoPosAvalie(ACasoPosAvalie node)
    {
        inACasoPosAvalie(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        outACasoPosAvalie(node);
    }

    public void inAAvalieSimplesAvalieSenao(AAvalieSimplesAvalieSenao node)
    {
        defaultIn(node);
    }

    public void outAAvalieSimplesAvalieSenao(AAvalieSimplesAvalieSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieSimplesAvalieSenao(AAvalieSimplesAvalieSenao node)
    {
        inAAvalieSimplesAvalieSenao(node);
        if(node.getPosAvalie() != null)
        {
            node.getPosAvalie().apply(this);
        }
        outAAvalieSimplesAvalieSenao(node);
    }

    public void inAAvalieSenaoAvalieSenao(AAvalieSenaoAvalieSenao node)
    {
        defaultIn(node);
    }

    public void outAAvalieSenaoAvalieSenao(AAvalieSenaoAvalieSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieSenaoAvalieSenao(AAvalieSenaoAvalieSenao node)
    {
        inAAvalieSenaoAvalieSenao(node);
        if(node.getPosAvalie() != null)
        {
            node.getPosAvalie().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getMultiplosComm() != null)
        {
            node.getMultiplosComm().apply(this);
        }
        outAAvalieSenaoAvalieSenao(node);
    }

    public void inAPosExp(APosExp node)
    {
        defaultIn(node);
    }

    public void outAPosExp(APosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExp(APosExp node)
    {
        inAPosExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAPosExp(node);
    }

    public void inAPosExplogica(APosExplogica node)
    {
        defaultIn(node);
    }

    public void outAPosExplogica(APosExplogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExplogica(APosExplogica node)
    {
        inAPosExplogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAPosExplogica(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAExpEntreParentesisExp(AExpEntreParentesisExp node)
    {
        defaultIn(node);
    }

    public void outAExpEntreParentesisExp(AExpEntreParentesisExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEntreParentesisExp(AExpEntreParentesisExp node)
    {
        inAExpEntreParentesisExp(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        outAExpEntreParentesisExp(node);
    }

    public void inAExpSomaExpExp(AExpSomaExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpSomaExpExp(AExpSomaExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaExpExp(AExpSomaExpExp node)
    {
        inAExpSomaExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpSomaExpExp(node);
    }

    public void inAExpSubExpExp(AExpSubExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpSubExpExp(AExpSubExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSubExpExp(AExpSubExpExp node)
    {
        inAExpSubExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpSubExpExp(node);
    }

    public void inAExpMulExpExp(AExpMulExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpMulExpExp(AExpMulExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMulExpExp(AExpMulExpExp node)
    {
        inAExpMulExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpMulExpExp(node);
    }

    public void inAExpDivExpExp(AExpDivExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpDivExpExp(AExpDivExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDivExpExp(AExpDivExpExp node)
    {
        inAExpDivExpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpDivExpExp(node);
    }

    public void inAExplogicaExp(AExplogicaExp node)
    {
        defaultIn(node);
    }

    public void outAExplogicaExp(AExplogicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogicaExp(AExplogicaExp node)
    {
        inAExplogicaExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExplogicaExp(node);
    }

    public void inAExplogicaEntreParentesisExpLogica(AExplogicaEntreParentesisExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExplogicaEntreParentesisExpLogica(AExplogicaEntreParentesisExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogicaEntreParentesisExpLogica(AExplogicaEntreParentesisExpLogica node)
    {
        inAExplogicaEntreParentesisExpLogica(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        outAExplogicaEntreParentesisExpLogica(node);
    }

    public void inAExpIgualaExpExpLogica(AExpIgualaExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpIgualaExpExpLogica(AExpIgualaExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgualaExpExpLogica(AExpIgualaExpExpLogica node)
    {
        inAExpIgualaExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpIgualaExpExpLogica(node);
    }

    public void inAExpDiferenteExpExpLogica(AExpDiferenteExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpDiferenteExpExpLogica(AExpDiferenteExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDiferenteExpExpLogica(AExpDiferenteExpExpLogica node)
    {
        inAExpDiferenteExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpDiferenteExpExpLogica(node);
    }

    public void inAExpMenorIgualExpExpLogica(AExpMenorIgualExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpMenorIgualExpExpLogica(AExpMenorIgualExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorIgualExpExpLogica(AExpMenorIgualExpExpLogica node)
    {
        inAExpMenorIgualExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpMenorIgualExpExpLogica(node);
    }

    public void inAExpMaiorIgualExpExpLogica(AExpMaiorIgualExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorIgualExpExpLogica(AExpMaiorIgualExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorIgualExpExpLogica(AExpMaiorIgualExpExpLogica node)
    {
        inAExpMaiorIgualExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpMaiorIgualExpExpLogica(node);
    }

    public void inAExpMenorExpExpLogica(AExpMenorExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpMenorExpExpLogica(AExpMenorExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorExpExpLogica(AExpMenorExpExpLogica node)
    {
        inAExpMenorExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpMenorExpExpLogica(node);
    }

    public void inAExpMaiorExpExpLogica(AExpMaiorExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorExpExpLogica(AExpMaiorExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorExpExpLogica(AExpMaiorExpExpLogica node)
    {
        inAExpMaiorExpExpLogica(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAExpMaiorExpExpLogica(node);
    }

    public void inANaoExplogicaExpLogica(ANaoExplogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outANaoExplogicaExpLogica(ANaoExplogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExplogicaExpLogica(ANaoExplogicaExpLogica node)
    {
        inANaoExplogicaExpLogica(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANaoExplogicaExpLogica(node);
    }

    public void inAExplogicaEExplogicaExpLogica(AExplogicaEExplogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExplogicaEExplogicaExpLogica(AExplogicaEExplogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogicaEExplogicaExpLogica(AExplogicaEExplogicaExpLogica node)
    {
        inAExplogicaEExplogicaExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getPosExplogica() != null)
        {
            node.getPosExplogica().apply(this);
        }
        outAExplogicaEExplogicaExpLogica(node);
    }

    public void inAExplogicaOuExplogicaExpLogica(AExplogicaOuExplogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExplogicaOuExplogicaExpLogica(AExplogicaOuExplogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogicaOuExplogicaExpLogica(AExplogicaOuExplogicaExpLogica node)
    {
        inAExplogicaOuExplogicaExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getPosExplogica() != null)
        {
            node.getPosExplogica().apply(this);
        }
        outAExplogicaOuExplogicaExpLogica(node);
    }

    public void inAExplogicaXorExplogicaExpLogica(AExplogicaXorExplogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExplogicaXorExplogicaExpLogica(AExplogicaXorExplogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplogicaXorExplogicaExpLogica(AExplogicaXorExplogicaExpLogica node)
    {
        inAExplogicaXorExplogicaExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getPosExplogica() != null)
        {
            node.getPosExplogica().apply(this);
        }
        outAExplogicaXorExplogicaExpLogica(node);
    }

    public void inAComVirgulaPosExpComm(AComVirgulaPosExpComm node)
    {
        defaultIn(node);
    }

    public void outAComVirgulaPosExpComm(AComVirgulaPosExpComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComVirgulaPosExpComm(AComVirgulaPosExpComm node)
    {
        inAComVirgulaPosExpComm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getPosExp() != null)
        {
            node.getPosExp().apply(this);
        }
        outAComVirgulaPosExpComm(node);
    }

    public void inASemVirgulaPosExpComm(ASemVirgulaPosExpComm node)
    {
        defaultIn(node);
    }

    public void outASemVirgulaPosExpComm(ASemVirgulaPosExpComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemVirgulaPosExpComm(ASemVirgulaPosExpComm node)
    {
        inASemVirgulaPosExpComm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASemVirgulaPosExpComm(node);
    }
}
