/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.analysis;

import java.util.*;
import jah.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPgrInicio().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPgrInicio(APgrInicio node)
    {
        defaultIn(node);
    }

    public void outAPgrInicio(APgrInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgrInicio(APgrInicio node)
    {
        inAPgrInicio(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getPgrDeclParte() != null)
        {
            node.getPgrDeclParte().apply(this);
        }
        outAPgrInicio(node);
    }

    public void inAComDeclPgrDeclParte(AComDeclPgrDeclParte node)
    {
        defaultIn(node);
    }

    public void outAComDeclPgrDeclParte(AComDeclPgrDeclParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComDeclPgrDeclParte(AComDeclPgrDeclParte node)
    {
        inAComDeclPgrDeclParte(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        if(node.getPgrDeclParte() != null)
        {
            node.getPgrDeclParte().apply(this);
        }
        outAComDeclPgrDeclParte(node);
    }

    public void inASemDeclPgrDeclParte(ASemDeclPgrDeclParte node)
    {
        defaultIn(node);
    }

    public void outASemDeclPgrDeclParte(ASemDeclPgrDeclParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemDeclPgrDeclParte(ASemDeclPgrDeclParte node)
    {
        inASemDeclPgrDeclParte(node);
        if(node.getPgrCommParte() != null)
        {
            node.getPgrCommParte().apply(this);
        }
        outASemDeclPgrDeclParte(node);
    }

    public void inAComCommPgrCommParte(AComCommPgrCommParte node)
    {
        defaultIn(node);
    }

    public void outAComCommPgrCommParte(AComCommPgrCommParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComCommPgrCommParte(AComCommPgrCommParte node)
    {
        inAComCommPgrCommParte(node);
        if(node.getComm() != null)
        {
            node.getComm().apply(this);
        }
        if(node.getPgrCommParte() != null)
        {
            node.getPgrCommParte().apply(this);
        }
        outAComCommPgrCommParte(node);
    }

    public void inASemCommPgrCommParte(ASemCommPgrCommParte node)
    {
        defaultIn(node);
    }

    public void outASemCommPgrCommParte(ASemCommPgrCommParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemCommPgrCommParte(ASemCommPgrCommParte node)
    {
        inASemCommPgrCommParte(node);
        if(node.getPgrFinal() != null)
        {
            node.getPgrFinal().apply(this);
        }
        outASemCommPgrCommParte(node);
    }

    public void inAPgrFinal(APgrFinal node)
    {
        defaultIn(node);
    }

    public void outAPgrFinal(APgrFinal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgrFinal(APgrFinal node)
    {
        inAPgrFinal(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        outAPgrFinal(node);
    }

    public void inAVariavelDecl(AVariavelDecl node)
    {
        defaultIn(node);
    }

    public void outAVariavelDecl(AVariavelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDecl(AVariavelDecl node)
    {
        inAVariavelDecl(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAVariavelDecl(node);
    }

    public void inAConstanteDecl(AConstanteDecl node)
    {
        defaultIn(node);
    }

    public void outAConstanteDecl(AConstanteDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDecl(AConstanteDecl node)
    {
        inAConstanteDecl(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outAConstanteDecl(node);
    }

    public void inAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        inAComVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        outAComVirgulaPosDecl(node);
    }

    public void inASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        inASemVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASemVirgulaPosDecl(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inAStringTipo(AStringTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipo(AStringTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipo(AStringTipo node)
    {
        inAStringTipo(node);
        if(node.getTipoString() != null)
        {
            node.getTipoString().apply(this);
        }
        outAStringTipo(node);
    }

    public void inANormalVar(ANormalVar node)
    {
        defaultIn(node);
    }

    public void outANormalVar(ANormalVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalVar(ANormalVar node)
    {
        inANormalVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANormalVar(node);
    }

    public void inAArrayVar(AArrayVar node)
    {
        defaultIn(node);
    }

    public void outAArrayVar(AArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        inAArrayVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        outAArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAMaisComandosComandos(AMaisComandosComandos node)
    {
        defaultIn(node);
    }

    public void outAMaisComandosComandos(AMaisComandosComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisComandosComandos(AMaisComandosComandos node)
    {
        inAMaisComandosComandos(node);
        if(node.getComm() != null)
        {
            node.getComm().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outAMaisComandosComandos(node);
    }

    public void inAComandoVazioComandos(AComandoVazioComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoVazioComandos(AComandoVazioComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoVazioComandos(AComandoVazioComandos node)
    {
        inAComandoVazioComandos(node);
        outAComandoVazioComandos(node);
    }

    public void inASimplesComm(ASimplesComm node)
    {
        defaultIn(node);
    }

    public void outASimplesComm(ASimplesComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesComm(ASimplesComm node)
    {
        inASimplesComm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outASimplesComm(node);
    }

    public void inALeiaComm(ALeiaComm node)
    {
        defaultIn(node);
    }

    public void outALeiaComm(ALeiaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComm(ALeiaComm node)
    {
        inALeiaComm(node);
        if(node.getCommLeia() != null)
        {
            node.getCommLeia().apply(this);
        }
        outALeiaComm(node);
    }

    public void inAEscrevaComm(AEscrevaComm node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComm(AEscrevaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComm(AEscrevaComm node)
    {
        inAEscrevaComm(node);
        if(node.getCommEscreva() != null)
        {
            node.getCommEscreva().apply(this);
        }
        outAEscrevaComm(node);
    }

    public void inASeComm(ASeComm node)
    {
        defaultIn(node);
    }

    public void outASeComm(ASeComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComm(ASeComm node)
    {
        inASeComm(node);
        if(node.getCommSe() != null)
        {
            node.getCommSe().apply(this);
        }
        outASeComm(node);
    }

    public void inAAvalieComm(AAvalieComm node)
    {
        defaultIn(node);
    }

    public void outAAvalieComm(AAvalieComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComm(AAvalieComm node)
    {
        inAAvalieComm(node);
        if(node.getCommAvalie() != null)
        {
            node.getCommAvalie().apply(this);
        }
        outAAvalieComm(node);
    }

    public void inAEnquantoComm(AEnquantoComm node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComm(AEnquantoComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComm(AEnquantoComm node)
    {
        inAEnquantoComm(node);
        if(node.getCommEnquanto() != null)
        {
            node.getCommEnquanto().apply(this);
        }
        outAEnquantoComm(node);
    }

    public void inARepitaComm(ARepitaComm node)
    {
        defaultIn(node);
    }

    public void outARepitaComm(ARepitaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComm(ARepitaComm node)
    {
        inARepitaComm(node);
        if(node.getCommRepita() != null)
        {
            node.getCommRepita().apply(this);
        }
        outARepitaComm(node);
    }

    public void inAParaComm(AParaComm node)
    {
        defaultIn(node);
    }

    public void outAParaComm(AParaComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComm(AParaComm node)
    {
        inAParaComm(node);
        if(node.getCommPara() != null)
        {
            node.getCommPara().apply(this);
        }
        outAParaComm(node);
    }

    public void inACommLeia(ACommLeia node)
    {
        defaultIn(node);
    }

    public void outACommLeia(ACommLeia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommLeia(ACommLeia node)
    {
        inACommLeia(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getCommLeiaSegundaParte() != null)
        {
            node.getCommLeiaSegundaParte().apply(this);
        }
        outACommLeia(node);
    }

    public void inAVariosExpCommLeiaSegundaParte(AVariosExpCommLeiaSegundaParte node)
    {
        defaultIn(node);
    }

    public void outAVariosExpCommLeiaSegundaParte(AVariosExpCommLeiaSegundaParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosExpCommLeiaSegundaParte(AVariosExpCommLeiaSegundaParte node)
    {
        inAVariosExpCommLeiaSegundaParte(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getCommLeiaSegundaParte() != null)
        {
            node.getCommLeiaSegundaParte().apply(this);
        }
        outAVariosExpCommLeiaSegundaParte(node);
    }

    public void inAUmExpCommLeiaSegundaParte(AUmExpCommLeiaSegundaParte node)
    {
        defaultIn(node);
    }

    public void outAUmExpCommLeiaSegundaParte(AUmExpCommLeiaSegundaParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmExpCommLeiaSegundaParte(AUmExpCommLeiaSegundaParte node)
    {
        inAUmExpCommLeiaSegundaParte(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getCommLeiaTerceiraParte() != null)
        {
            node.getCommLeiaTerceiraParte().apply(this);
        }
        outAUmExpCommLeiaSegundaParte(node);
    }

    public void inACommLeiaTerceiraParte(ACommLeiaTerceiraParte node)
    {
        defaultIn(node);
    }

    public void outACommLeiaTerceiraParte(ACommLeiaTerceiraParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommLeiaTerceiraParte(ACommLeiaTerceiraParte node)
    {
        inACommLeiaTerceiraParte(node);
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommLeiaTerceiraParte(node);
    }

    public void inACommEscreva(ACommEscreva node)
    {
        defaultIn(node);
    }

    public void outACommEscreva(ACommEscreva node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommEscreva(ACommEscreva node)
    {
        inACommEscreva(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getCommEscrevaSegundaParte() != null)
        {
            node.getCommEscrevaSegundaParte().apply(this);
        }
        outACommEscreva(node);
    }

    public void inAVariosExpCommEscrevaSegundaParte(AVariosExpCommEscrevaSegundaParte node)
    {
        defaultIn(node);
    }

    public void outAVariosExpCommEscrevaSegundaParte(AVariosExpCommEscrevaSegundaParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosExpCommEscrevaSegundaParte(AVariosExpCommEscrevaSegundaParte node)
    {
        inAVariosExpCommEscrevaSegundaParte(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getCommEscrevaSegundaParte() != null)
        {
            node.getCommEscrevaSegundaParte().apply(this);
        }
        outAVariosExpCommEscrevaSegundaParte(node);
    }

    public void inAUmExpCommEscrevaSegundaParte(AUmExpCommEscrevaSegundaParte node)
    {
        defaultIn(node);
    }

    public void outAUmExpCommEscrevaSegundaParte(AUmExpCommEscrevaSegundaParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmExpCommEscrevaSegundaParte(AUmExpCommEscrevaSegundaParte node)
    {
        inAUmExpCommEscrevaSegundaParte(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getCommEscrevaTerceiraParte() != null)
        {
            node.getCommEscrevaTerceiraParte().apply(this);
        }
        outAUmExpCommEscrevaSegundaParte(node);
    }

    public void inACommEscrevaTerceiraParte(ACommEscrevaTerceiraParte node)
    {
        defaultIn(node);
    }

    public void outACommEscrevaTerceiraParte(ACommEscrevaTerceiraParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommEscrevaTerceiraParte(ACommEscrevaTerceiraParte node)
    {
        inACommEscrevaTerceiraParte(node);
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommEscrevaTerceiraParte(node);
    }

    public void inACommSe(ACommSe node)
    {
        defaultIn(node);
    }

    public void outACommSe(ACommSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommSe(ACommSe node)
    {
        inACommSe(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getCommSeSenao() != null)
        {
            node.getCommSeSenao().apply(this);
        }
        if(node.getCommSeFim() != null)
        {
            node.getCommSeFim().apply(this);
        }
        outACommSe(node);
    }

    public void inACommSeSenao(ACommSeSenao node)
    {
        defaultIn(node);
    }

    public void outACommSeSenao(ACommSeSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommSeSenao(ACommSeSenao node)
    {
        inACommSeSenao(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outACommSeSenao(node);
    }

    public void inACommSeFim(ACommSeFim node)
    {
        defaultIn(node);
    }

    public void outACommSeFim(ACommSeFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommSeFim(ACommSeFim node)
    {
        inACommSeFim(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommSeFim(node);
    }

    public void inACommAvalie(ACommAvalie node)
    {
        defaultIn(node);
    }

    public void outACommAvalie(ACommAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommAvalie(ACommAvalie node)
    {
        inACommAvalie(node);
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getCommAvalieCasoParte() != null)
        {
            node.getCommAvalieCasoParte().apply(this);
        }
        outACommAvalie(node);
    }

    public void inAComCasoCommAvalieCasoParte(AComCasoCommAvalieCasoParte node)
    {
        defaultIn(node);
    }

    public void outAComCasoCommAvalieCasoParte(AComCasoCommAvalieCasoParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComCasoCommAvalieCasoParte(AComCasoCommAvalieCasoParte node)
    {
        inAComCasoCommAvalieCasoParte(node);
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getCommAvalieCasoParte() != null)
        {
            node.getCommAvalieCasoParte().apply(this);
        }
        outAComCasoCommAvalieCasoParte(node);
    }

    public void inASemCasoCommAvalieCasoParte(ASemCasoCommAvalieCasoParte node)
    {
        defaultIn(node);
    }

    public void outASemCasoCommAvalieCasoParte(ASemCasoCommAvalieCasoParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemCasoCommAvalieCasoParte(ASemCasoCommAvalieCasoParte node)
    {
        inASemCasoCommAvalieCasoParte(node);
        if(node.getCommAvalieSenaoParte() != null)
        {
            node.getCommAvalieSenaoParte().apply(this);
        }
        outASemCasoCommAvalieCasoParte(node);
    }

    public void inAComSenaoCommAvalieSenaoParte(AComSenaoCommAvalieSenaoParte node)
    {
        defaultIn(node);
    }

    public void outAComSenaoCommAvalieSenaoParte(AComSenaoCommAvalieSenaoParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComSenaoCommAvalieSenaoParte(AComSenaoCommAvalieSenaoParte node)
    {
        inAComSenaoCommAvalieSenaoParte(node);
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getCommAvalieFim() != null)
        {
            node.getCommAvalieFim().apply(this);
        }
        outAComSenaoCommAvalieSenaoParte(node);
    }

    public void inASemSenaoCommAvalieSenaoParte(ASemSenaoCommAvalieSenaoParte node)
    {
        defaultIn(node);
    }

    public void outASemSenaoCommAvalieSenaoParte(ASemSenaoCommAvalieSenaoParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemSenaoCommAvalieSenaoParte(ASemSenaoCommAvalieSenaoParte node)
    {
        inASemSenaoCommAvalieSenaoParte(node);
        if(node.getCommAvalieFim() != null)
        {
            node.getCommAvalieFim().apply(this);
        }
        outASemSenaoCommAvalieSenaoParte(node);
    }

    public void inACommAvalieFim(ACommAvalieFim node)
    {
        defaultIn(node);
    }

    public void outACommAvalieFim(ACommAvalieFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommAvalieFim(ACommAvalieFim node)
    {
        inACommAvalieFim(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommAvalieFim(node);
    }

    public void inACommEnquanto(ACommEnquanto node)
    {
        defaultIn(node);
    }

    public void outACommEnquanto(ACommEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommEnquanto(ACommEnquanto node)
    {
        inACommEnquanto(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getCommEnquantoFim() != null)
        {
            node.getCommEnquantoFim().apply(this);
        }
        outACommEnquanto(node);
    }

    public void inACommEnquantoFim(ACommEnquantoFim node)
    {
        defaultIn(node);
    }

    public void outACommEnquantoFim(ACommEnquantoFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommEnquantoFim(ACommEnquantoFim node)
    {
        inACommEnquantoFim(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommEnquantoFim(node);
    }

    public void inACommRepita(ACommRepita node)
    {
        defaultIn(node);
    }

    public void outACommRepita(ACommRepita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommRepita(ACommRepita node)
    {
        inACommRepita(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getCommRepitaComandosParte() != null)
        {
            node.getCommRepitaComandosParte().apply(this);
        }
        outACommRepita(node);
    }

    public void inACommRepitaComandosParte(ACommRepitaComandosParte node)
    {
        defaultIn(node);
    }

    public void outACommRepitaComandosParte(ACommRepitaComandosParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommRepitaComandosParte(ACommRepitaComandosParte node)
    {
        inACommRepitaComandosParte(node);
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getCommRepitaCondicaoParte() != null)
        {
            node.getCommRepitaCondicaoParte().apply(this);
        }
        outACommRepitaComandosParte(node);
    }

    public void inACommRepitaCondicaoParte(ACommRepitaCondicaoParte node)
    {
        defaultIn(node);
    }

    public void outACommRepitaCondicaoParte(ACommRepitaCondicaoParte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommRepitaCondicaoParte(ACommRepitaCondicaoParte node)
    {
        inACommRepitaCondicaoParte(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommRepitaCondicaoParte(node);
    }

    public void inACommPara(ACommPara node)
    {
        defaultIn(node);
    }

    public void outACommPara(ACommPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommPara(ACommPara node)
    {
        inACommPara(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getCommParaPassa() != null)
        {
            node.getCommParaPassa().apply(this);
        }
        outACommPara(node);
    }

    public void inAComPassoCommParaPassa(AComPassoCommParaPassa node)
    {
        defaultIn(node);
    }

    public void outAComPassoCommParaPassa(AComPassoCommParaPassa node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComPassoCommParaPassa(AComPassoCommParaPassa node)
    {
        inAComPassoCommParaPassa(node);
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getCommParaAte() != null)
        {
            node.getCommParaAte().apply(this);
        }
        outAComPassoCommParaPassa(node);
    }

    public void inASemPassoCommParaPassa(ASemPassoCommParaPassa node)
    {
        defaultIn(node);
    }

    public void outASemPassoCommParaPassa(ASemPassoCommParaPassa node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemPassoCommParaPassa(ASemPassoCommParaPassa node)
    {
        inASemPassoCommParaPassa(node);
        if(node.getCommParaAte() != null)
        {
            node.getCommParaAte().apply(this);
        }
        outASemPassoCommParaPassa(node);
    }

    public void inACommParaAte(ACommParaAte node)
    {
        defaultIn(node);
    }

    public void outACommParaAte(ACommParaAte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommParaAte(ACommParaAte node)
    {
        inACommParaAte(node);
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getCommParaMeio() != null)
        {
            node.getCommParaMeio().apply(this);
        }
        outACommParaAte(node);
    }

    public void inACommParaMeio(ACommParaMeio node)
    {
        defaultIn(node);
    }

    public void outACommParaMeio(ACommParaMeio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommParaMeio(ACommParaMeio node)
    {
        inACommParaMeio(node);
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getCommParaFim() != null)
        {
            node.getCommParaFim().apply(this);
        }
        outACommParaMeio(node);
    }

    public void inACommParaFim(ACommParaFim node)
    {
        defaultIn(node);
    }

    public void outACommParaFim(ACommParaFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommParaFim(ACommParaFim node)
    {
        inACommParaFim(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        outACommParaFim(node);
    }

    public void inAOperacaoExp(AOperacaoExp node)
    {
        defaultIn(node);
    }

    public void outAOperacaoExp(AOperacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoExp(AOperacaoExp node)
    {
        inAOperacaoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getExpAritPriUm() != null)
        {
            node.getExpAritPriUm().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOperacaoExp(node);
    }

    public void inAProximoExp(AProximoExp node)
    {
        defaultIn(node);
    }

    public void outAProximoExp(AProximoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProximoExp(AProximoExp node)
    {
        inAProximoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAProximoExp(node);
    }

    public void inAOperacaoTermo(AOperacaoTermo node)
    {
        defaultIn(node);
    }

    public void outAOperacaoTermo(AOperacaoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoTermo(AOperacaoTermo node)
    {
        inAOperacaoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getExpAritPriDois() != null)
        {
            node.getExpAritPriDois().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAOperacaoTermo(node);
    }

    public void inAProximoTermo(AProximoTermo node)
    {
        defaultIn(node);
    }

    public void outAProximoTermo(AProximoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProximoTermo(AProximoTermo node)
    {
        inAProximoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAProximoTermo(node);
    }

    public void inAParentesisFator(AParentesisFator node)
    {
        defaultIn(node);
    }

    public void outAParentesisFator(AParentesisFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesisFator(AParentesisFator node)
    {
        inAParentesisFator(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        outAParentesisFator(node);
    }

    public void inASubstituiIdFator(ASubstituiIdFator node)
    {
        defaultIn(node);
    }

    public void outASubstituiIdFator(ASubstituiIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstituiIdFator(ASubstituiIdFator node)
    {
        inASubstituiIdFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASubstituiIdFator(node);
    }

    public void inASubstituiValorFator(ASubstituiValorFator node)
    {
        defaultIn(node);
    }

    public void outASubstituiValorFator(ASubstituiValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstituiValorFator(ASubstituiValorFator node)
    {
        inASubstituiValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outASubstituiValorFator(node);
    }

    public void inAFazCompExpLogica(AFazCompExpLogica node)
    {
        defaultIn(node);
    }

    public void outAFazCompExpLogica(AFazCompExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFazCompExpLogica(AFazCompExpLogica node)
    {
        inAFazCompExpLogica(node);
        if(node.getDesLogica() != null)
        {
            node.getDesLogica().apply(this);
        }
        if(node.getExpLogPriUm() != null)
        {
            node.getExpLogPriUm().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAFazCompExpLogica(node);
    }

    public void inADesigualExpLogica(ADesigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outADesigualExpLogica(ADesigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesigualExpLogica(ADesigualExpLogica node)
    {
        inADesigualExpLogica(node);
        if(node.getDesLogica() != null)
        {
            node.getDesLogica().apply(this);
        }
        outADesigualExpLogica(node);
    }

    public void inAFazDesDesLogica(AFazDesDesLogica node)
    {
        defaultIn(node);
    }

    public void outAFazDesDesLogica(AFazDesDesLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFazDesDesLogica(AFazDesDesLogica node)
    {
        inAFazDesDesLogica(node);
        if(node.getOprLogica() != null)
        {
            node.getOprLogica().apply(this);
        }
        if(node.getExpLogPriDois() != null)
        {
            node.getExpLogPriDois().apply(this);
        }
        if(node.getDesLogica() != null)
        {
            node.getDesLogica().apply(this);
        }
        outAFazDesDesLogica(node);
    }

    public void inAOprsDesLogica(AOprsDesLogica node)
    {
        defaultIn(node);
    }

    public void outAOprsDesLogica(AOprsDesLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOprsDesLogica(AOprsDesLogica node)
    {
        inAOprsDesLogica(node);
        if(node.getOprLogica() != null)
        {
            node.getOprLogica().apply(this);
        }
        outAOprsDesLogica(node);
    }

    public void inAOpLogicoOprLogica(AOpLogicoOprLogica node)
    {
        defaultIn(node);
    }

    public void outAOpLogicoOprLogica(AOpLogicoOprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpLogicoOprLogica(AOpLogicoOprLogica node)
    {
        inAOpLogicoOprLogica(node);
        if(node.getFimLogica() != null)
        {
            node.getFimLogica().apply(this);
        }
        if(node.getExpLogPriTres() != null)
        {
            node.getExpLogPriTres().apply(this);
        }
        if(node.getOprLogica() != null)
        {
            node.getOprLogica().apply(this);
        }
        outAOpLogicoOprLogica(node);
    }

    public void inAFinalizaOprLogica(AFinalizaOprLogica node)
    {
        defaultIn(node);
    }

    public void outAFinalizaOprLogica(AFinalizaOprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalizaOprLogica(AFinalizaOprLogica node)
    {
        inAFinalizaOprLogica(node);
        if(node.getFimLogica() != null)
        {
            node.getFimLogica().apply(this);
        }
        outAFinalizaOprLogica(node);
    }

    public void inAParentesisFimLogica(AParentesisFimLogica node)
    {
        defaultIn(node);
    }

    public void outAParentesisFimLogica(AParentesisFimLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesisFimLogica(AParentesisFimLogica node)
    {
        inAParentesisFimLogica(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        outAParentesisFimLogica(node);
    }

    public void inASubstituiVarFimLogica(ASubstituiVarFimLogica node)
    {
        defaultIn(node);
    }

    public void outASubstituiVarFimLogica(ASubstituiVarFimLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstituiVarFimLogica(ASubstituiVarFimLogica node)
    {
        inASubstituiVarFimLogica(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASubstituiVarFimLogica(node);
    }

    public void inASubstituiValorFimLogica(ASubstituiValorFimLogica node)
    {
        defaultIn(node);
    }

    public void outASubstituiValorFimLogica(ASubstituiValorFimLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubstituiValorFimLogica(ASubstituiValorFimLogica node)
    {
        inASubstituiValorFimLogica(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outASubstituiValorFimLogica(node);
    }

    public void inASomaExpAritPriUm(ASomaExpAritPriUm node)
    {
        defaultIn(node);
    }

    public void outASomaExpAritPriUm(ASomaExpAritPriUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpAritPriUm(ASomaExpAritPriUm node)
    {
        inASomaExpAritPriUm(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outASomaExpAritPriUm(node);
    }

    public void inASubtracaoExpAritPriUm(ASubtracaoExpAritPriUm node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExpAritPriUm(ASubtracaoExpAritPriUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExpAritPriUm(ASubtracaoExpAritPriUm node)
    {
        inASubtracaoExpAritPriUm(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        outASubtracaoExpAritPriUm(node);
    }

    public void inAMultiplicacaoExpAritPriDois(AMultiplicacaoExpAritPriDois node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoExpAritPriDois(AMultiplicacaoExpAritPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoExpAritPriDois(AMultiplicacaoExpAritPriDois node)
    {
        inAMultiplicacaoExpAritPriDois(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultiplicacaoExpAritPriDois(node);
    }

    public void inADivisaoExpAritPriDois(ADivisaoExpAritPriDois node)
    {
        defaultIn(node);
    }

    public void outADivisaoExpAritPriDois(ADivisaoExpAritPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExpAritPriDois(ADivisaoExpAritPriDois node)
    {
        inADivisaoExpAritPriDois(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivisaoExpAritPriDois(node);
    }

    public void inALogicoExpAritPriDois(ALogicoExpAritPriDois node)
    {
        defaultIn(node);
    }

    public void outALogicoExpAritPriDois(ALogicoExpAritPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicoExpAritPriDois(ALogicoExpAritPriDois node)
    {
        inALogicoExpAritPriDois(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outALogicoExpAritPriDois(node);
    }

    public void inAIgualExpLogPriUm(AIgualExpLogPriUm node)
    {
        defaultIn(node);
    }

    public void outAIgualExpLogPriUm(AIgualExpLogPriUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpLogPriUm(AIgualExpLogPriUm node)
    {
        inAIgualExpLogPriUm(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualExpLogPriUm(node);
    }

    public void inADiferenteExpLogPriUm(ADiferenteExpLogPriUm node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpLogPriUm(ADiferenteExpLogPriUm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpLogPriUm(ADiferenteExpLogPriUm node)
    {
        inADiferenteExpLogPriUm(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteExpLogPriUm(node);
    }

    public void inAMenorExpLogPriDois(AMenorExpLogPriDois node)
    {
        defaultIn(node);
    }

    public void outAMenorExpLogPriDois(AMenorExpLogPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpLogPriDois(AMenorExpLogPriDois node)
    {
        inAMenorExpLogPriDois(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorExpLogPriDois(node);
    }

    public void inAMenorigualExpLogPriDois(AMenorigualExpLogPriDois node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExpLogPriDois(AMenorigualExpLogPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExpLogPriDois(AMenorigualExpLogPriDois node)
    {
        inAMenorigualExpLogPriDois(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorigualExpLogPriDois(node);
    }

    public void inAMaiorExpLogPriDois(AMaiorExpLogPriDois node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpLogPriDois(AMaiorExpLogPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpLogPriDois(AMaiorExpLogPriDois node)
    {
        inAMaiorExpLogPriDois(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorExpLogPriDois(node);
    }

    public void inAMaiorigualExpLogPriDois(AMaiorigualExpLogPriDois node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExpLogPriDois(AMaiorigualExpLogPriDois node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExpLogPriDois(AMaiorigualExpLogPriDois node)
    {
        inAMaiorigualExpLogPriDois(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorigualExpLogPriDois(node);
    }

    public void inANotExpLogPriTres(ANotExpLogPriTres node)
    {
        defaultIn(node);
    }

    public void outANotExpLogPriTres(ANotExpLogPriTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpLogPriTres(ANotExpLogPriTres node)
    {
        inANotExpLogPriTres(node);
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANotExpLogPriTres(node);
    }

    public void inAAndExpLogPriTres(AAndExpLogPriTres node)
    {
        defaultIn(node);
    }

    public void outAAndExpLogPriTres(AAndExpLogPriTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpLogPriTres(AAndExpLogPriTres node)
    {
        inAAndExpLogPriTres(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAAndExpLogPriTres(node);
    }

    public void inAOrExpLogPriTres(AOrExpLogPriTres node)
    {
        defaultIn(node);
    }

    public void outAOrExpLogPriTres(AOrExpLogPriTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpLogPriTres(AOrExpLogPriTres node)
    {
        inAOrExpLogPriTres(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOrExpLogPriTres(node);
    }

    public void inAXorExpLogPriTres(AXorExpLogPriTres node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogPriTres(AXorExpLogPriTres node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogPriTres(AXorExpLogPriTres node)
    {
        inAXorExpLogPriTres(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorExpLogPriTres(node);
    }
}
