/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.parser;

import jah.lexer.*;
import jah.node.*;
import jah.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPgr node1 = (PPgr) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ASemTudoPgr */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AComDeclPgr */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AComCommPgr */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AComTudoPgr */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AMultipDecls */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ASingleDecls */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AMultipComms */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ASingleComms */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AMultipVarList */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce ASingleVarList */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AVariaveisDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AConstanteDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AStringTipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ANormalVar */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AArrayVar */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AStringValor */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AInteiroValor */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ARealValor */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce ASimplesComm */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ALeiaComm */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AEscrevaComm */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASeComm */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AAvalieComm */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AEnquantoComm */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce ARepitaComm */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AParaComm */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce ACommLeia */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce AVariosVarCommLeiaSegundaParte */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce AUmVarCommLeiaSegundaParte */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce ACommLeiaTerceiraParte */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce ACommEscreva */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AVariosExpAriCommEscrevaSegundaParte */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce AVariosExpLogCommEscrevaSegundaParte */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AUmExpAriCommEscrevaSegundaParte */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AUmExpLogCommEscrevaSegundaParte */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce ACommEscrevaTerceiraParte */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AComSenaoCommSe */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce ASemSenaoCommSe */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce ACommSeSenao */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list);
            }
            break;
            case 41: /* reduce ACommSeFim */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce AExpAriCommAvalie */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list);
            }
            break;
            case 43: /* reduce AExpLogCommAvalie */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list);
            }
            break;
            case 44: /* reduce AComCasoCommAvalieCasoParte */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list);
            }
            break;
            case 45: /* reduce ASemCasoCommAvalieCasoParte */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce AComSenaoCommAvalieSenaoParte */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce ASemSenaoCommAvalieSenaoParte */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce ACommAvalieFim */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ACommEnquanto */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce ACommEnquantoFim */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list);
            }
            break;
            case 51: /* reduce ACommRepita */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce ACommRepitaCommsParte */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce ACommRepitaCondicaoParte */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list);
            }
            break;
            case 54: /* reduce ACommPara */
            {
                ArrayList<Object> list = new54();
                push(goTo(27), list);
            }
            break;
            case 55: /* reduce AComPassoCommParaPassa */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list);
            }
            break;
            case 56: /* reduce ASemPassoCommParaPassa */
            {
                ArrayList<Object> list = new56();
                push(goTo(28), list);
            }
            break;
            case 57: /* reduce ACommParaAte */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list);
            }
            break;
            case 58: /* reduce AFimCommParaFim */
            {
                ArrayList<Object> list = new58();
                push(goTo(30), list);
            }
            break;
            case 59: /* reduce ANadaCommParaFim */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list);
            }
            break;
            case 60: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list);
            }
            break;
            case 61: /* reduce ASubtExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(31), list);
            }
            break;
            case 62: /* reduce ATermExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(31), list);
            }
            break;
            case 63: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new63();
                push(goTo(32), list);
            }
            break;
            case 64: /* reduce ADiviTermo */
            {
                ArrayList<Object> list = new64();
                push(goTo(32), list);
            }
            break;
            case 65: /* reduce AFimTermo */
            {
                ArrayList<Object> list = new65();
                push(goTo(32), list);
            }
            break;
            case 66: /* reduce AParentesisExpFinal */
            {
                ArrayList<Object> list = new66();
                push(goTo(33), list);
            }
            break;
            case 67: /* reduce ANegativaExpExpFinal */
            {
                ArrayList<Object> list = new67();
                push(goTo(33), list);
            }
            break;
            case 68: /* reduce ASubstituirVarExpFinal */
            {
                ArrayList<Object> list = new68();
                push(goTo(33), list);
            }
            break;
            case 69: /* reduce ASubstituirValExpFinal */
            {
                ArrayList<Object> list = new69();
                push(goTo(33), list);
            }
            break;
            case 70: /* reduce AAndExpLogica */
            {
                ArrayList<Object> list = new70();
                push(goTo(34), list);
            }
            break;
            case 71: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new71();
                push(goTo(34), list);
            }
            break;
            case 72: /* reduce AXorExpLogica */
            {
                ArrayList<Object> list = new72();
                push(goTo(34), list);
            }
            break;
            case 73: /* reduce ANotExpLogica */
            {
                ArrayList<Object> list = new73();
                push(goTo(34), list);
            }
            break;
            case 74: /* reduce APrxExpLogica */
            {
                ArrayList<Object> list = new74();
                push(goTo(34), list);
            }
            break;
            case 75: /* reduce ADiferenteLogPrecUm */
            {
                ArrayList<Object> list = new75();
                push(goTo(35), list);
            }
            break;
            case 76: /* reduce AIgualLogPrecUm */
            {
                ArrayList<Object> list = new76();
                push(goTo(35), list);
            }
            break;
            case 77: /* reduce AFatorLogPrecUm */
            {
                ArrayList<Object> list = new77();
                push(goTo(35), list);
            }
            break;
            case 78: /* reduce AMaiorLogPrecDois */
            {
                ArrayList<Object> list = new78();
                push(goTo(36), list);
            }
            break;
            case 79: /* reduce AMenorLogPrecDois */
            {
                ArrayList<Object> list = new79();
                push(goTo(36), list);
            }
            break;
            case 80: /* reduce AMaiorqLogPrecDois */
            {
                ArrayList<Object> list = new80();
                push(goTo(36), list);
            }
            break;
            case 81: /* reduce AMenorqLogPrecDois */
            {
                ArrayList<Object> list = new81();
                push(goTo(36), list);
            }
            break;
            case 82: /* reduce AParLogPrecDois */
            {
                ArrayList<Object> list = new82();
                push(goTo(36), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ASemTudoPgr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPgr ppgrNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        ppgrNode1 = new ASemTudoPgr(tidNode2);
        }
	nodeList.add(ppgrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AComDeclPgr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPgr ppgrNode1;
        {
            // Block
        TId tidNode2;
        PDecls pdeclsNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pdeclsNode3 = (PDecls)nodeArrayList4.get(0);

        ppgrNode1 = new AComDeclPgr(tidNode2, pdeclsNode3);
        }
	nodeList.add(ppgrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AComCommPgr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPgr ppgrNode1;
        {
            // Block
        TId tidNode2;
        PComms pcommsNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pcommsNode3 = (PComms)nodeArrayList4.get(0);

        ppgrNode1 = new AComCommPgr(tidNode2, pcommsNode3);
        }
	nodeList.add(ppgrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AComTudoPgr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPgr ppgrNode1;
        {
            // Block
        TId tidNode2;
        PDecls pdeclsNode3;
        PComms pcommsNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pdeclsNode3 = (PDecls)nodeArrayList4.get(0);
        pcommsNode4 = (PComms)nodeArrayList5.get(0);

        ppgrNode1 = new AComTudoPgr(tidNode2, pdeclsNode3, pcommsNode4);
        }
	nodeList.add(ppgrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultipDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        PDecl pdeclNode2;
        PDecls pdeclsNode3;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
        pdeclsNode3 = (PDecls)nodeArrayList2.get(0);

        pdeclsNode1 = new AMultipDecls(pdeclNode2, pdeclsNode3);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASingleDecls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        PDecl pdeclNode2;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);

        pdeclsNode1 = new ASingleDecls(pdeclNode2);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMultipComms */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComms pcommsNode1;
        {
            // Block
        PComm pcommNode2;
        PComms pcommsNode3;
        pcommNode2 = (PComm)nodeArrayList1.get(0);
        pcommsNode3 = (PComms)nodeArrayList2.get(0);

        pcommsNode1 = new AMultipComms(pcommNode2, pcommsNode3);
        }
	nodeList.add(pcommsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ASingleComms */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComms pcommsNode1;
        {
            // Block
        PComm pcommNode2;
        pcommNode2 = (PComm)nodeArrayList1.get(0);

        pcommsNode1 = new ASingleComms(pcommNode2);
        }
	nodeList.add(pcommsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMultipVarList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarList pvarlistNode1;
        {
            // Block
        PVar pvarNode2;
        PVarList pvarlistNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pvarlistNode3 = (PVarList)nodeArrayList3.get(0);

        pvarlistNode1 = new AMultipVarList(pvarNode2, pvarlistNode3);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASingleVarList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarList pvarlistNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pvarlistNode1 = new ASingleVarList(pvarNode2);
        }
	nodeList.add(pvarlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVariaveisDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PTipo ptipoNode2;
        PVarList pvarlistNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pvarlistNode3 = (PVarList)nodeArrayList3.get(0);

        pdeclNode1 = new AVariaveisDecl(ptipoNode2, pvarlistNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AConstanteDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TId tidNode2;
        PValor pvalorNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclNode1 = new AConstanteDecl(tidNode2, pvalorNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoReal ttiporealNode2;
        ttiporealNode2 = (TTipoReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(ttiporealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoInteiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipoInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(ttipointeiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AStringTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoString ttipostringNode2;
        ttipostringNode2 = (TTipoString)nodeArrayList1.get(0);

        ptipoNode1 = new AStringTipo(ttipostringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANormalVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new ANormalVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TInteiro tinteiroNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList3.get(0);

        pvarNode1 = new AArrayVar(tidNode2, tinteiroNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInteiroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new AInteiroValor(tinteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(trealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASimplesComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcommNode1 = new ASimplesComm(pvarNode2, pexpNode3);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ALeiaComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommLeia pcommleiaNode2;
        pcommleiaNode2 = (PCommLeia)nodeArrayList1.get(0);

        pcommNode1 = new ALeiaComm(pcommleiaNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEscrevaComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommEscreva pcommescrevaNode2;
        pcommescrevaNode2 = (PCommEscreva)nodeArrayList1.get(0);

        pcommNode1 = new AEscrevaComm(pcommescrevaNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASeComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommSe pcommseNode2;
        pcommseNode2 = (PCommSe)nodeArrayList1.get(0);

        pcommNode1 = new ASeComm(pcommseNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAvalieComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommAvalie pcommavalieNode2;
        pcommavalieNode2 = (PCommAvalie)nodeArrayList1.get(0);

        pcommNode1 = new AAvalieComm(pcommavalieNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AEnquantoComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommEnquanto pcommenquantoNode2;
        pcommenquantoNode2 = (PCommEnquanto)nodeArrayList1.get(0);

        pcommNode1 = new AEnquantoComm(pcommenquantoNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARepitaComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommRepita pcommrepitaNode2;
        pcommrepitaNode2 = (PCommRepita)nodeArrayList1.get(0);

        pcommNode1 = new ARepitaComm(pcommrepitaNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AParaComm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComm pcommNode1;
        {
            // Block
        PCommPara pcommparaNode2;
        pcommparaNode2 = (PCommPara)nodeArrayList1.get(0);

        pcommNode1 = new AParaComm(pcommparaNode2);
        }
	nodeList.add(pcommNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACommLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommLeia pcommleiaNode1;
        {
            // Block

        pcommleiaNode1 = new ANadaCommLeia();
        }
	nodeList.add(pcommleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AVariosVarCommLeiaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommLeia pcommleiaNode1;
        {
            // Block
        PVar pvarNode2;
        PCommLeia pcommleiaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pcommleiaNode3 = (PCommLeia)nodeArrayList3.get(0);

        pcommleiaNode1 = new AAlgoCommLeia(pvarNode2, pcommleiaNode3);
        }
	nodeList.add(pcommleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AUmVarCommLeiaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommLeia pcommleiaNode1;
        {
            // Block
        PVar pvarNode2;
        PCommLeia pcommleiaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pcommleiaNode3 = (PCommLeia)nodeArrayList2.get(0);

        pcommleiaNode1 = new AAlgoCommLeia(pvarNode2, pcommleiaNode3);
        }
	nodeList.add(pcommleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ACommLeiaTerceiraParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommLeia pcommleiaNode1;
        {
            // Block

        pcommleiaNode1 = new ANadaCommLeia();
        }
	nodeList.add(pcommleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ACommEscreva */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block

        pcommescrevaNode1 = new ANadaCommEscreva();
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AVariosExpAriCommEscrevaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block
        PExp pexpNode2;
        PCommEscreva pcommescrevaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pcommescrevaNode3 = (PCommEscreva)nodeArrayList3.get(0);

        pcommescrevaNode1 = new AAlgoExpAriCommEscreva(pexpNode2, pcommescrevaNode3);
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVariosExpLogCommEscrevaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PCommEscreva pcommescrevaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pcommescrevaNode3 = (PCommEscreva)nodeArrayList3.get(0);

        pcommescrevaNode1 = new AAlgoExpLogCommEscreva(pexplogicaNode2, pcommescrevaNode3);
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AUmExpAriCommEscrevaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block
        PExp pexpNode2;
        PCommEscreva pcommescrevaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pcommescrevaNode3 = (PCommEscreva)nodeArrayList2.get(0);

        pcommescrevaNode1 = new AAlgoExpAriCommEscreva(pexpNode2, pcommescrevaNode3);
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AUmExpLogCommEscrevaSegundaParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PCommEscreva pcommescrevaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pcommescrevaNode3 = (PCommEscreva)nodeArrayList2.get(0);

        pcommescrevaNode1 = new AAlgoExpLogCommEscreva(pexplogicaNode2, pcommescrevaNode3);
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ACommEscrevaTerceiraParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEscreva pcommescrevaNode1;
        {
            // Block

        pcommescrevaNode1 = new ANadaCommEscreva();
        }
	nodeList.add(pcommescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AComSenaoCommSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommSe pcommseNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PComms pcommsNode3;
        PCommSeSenao pcommsesenaoNode4;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        pcommsNode3 = (PComms)nodeArrayList6.get(0);
        pcommsesenaoNode4 = (PCommSeSenao)nodeArrayList7.get(0);

        pcommseNode1 = new AComSenaoCommSe(pexplogicaNode2, pcommsNode3, pcommsesenaoNode4);
        }
	nodeList.add(pcommseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASemSenaoCommSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommSe pcommseNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PComms pcommsNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        pcommsNode3 = (PComms)nodeArrayList6.get(0);

        pcommseNode1 = new ASemSenaoCommSe(pexplogicaNode2, pcommsNode3);
        }
	nodeList.add(pcommseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ACommSeSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommSeSenao pcommsesenaoNode1;
        {
            // Block
        PComms pcommsNode2;
        pcommsNode2 = (PComms)nodeArrayList2.get(0);

        pcommsesenaoNode1 = new ACommSeSenao(pcommsNode2);
        }
	nodeList.add(pcommsesenaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACommSeFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpAriCommAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalie pcommavalieNode1;
        {
            // Block
        PExp pexpNode2;
        PCommAvalieCasoParte pcommavaliecasoparteNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcommavaliecasoparteNode3 = (PCommAvalieCasoParte)nodeArrayList5.get(0);

        pcommavalieNode1 = new AExpAriCommAvalie(pexpNode2, pcommavaliecasoparteNode3);
        }
	nodeList.add(pcommavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpLogCommAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalie pcommavalieNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PCommAvalieCasoParte pcommavaliecasoparteNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        pcommavaliecasoparteNode3 = (PCommAvalieCasoParte)nodeArrayList5.get(0);

        pcommavalieNode1 = new AExpLogCommAvalie(pexplogicaNode2, pcommavaliecasoparteNode3);
        }
	nodeList.add(pcommavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AComCasoCommAvalieCasoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalieCasoParte pcommavaliecasoparteNode1;
        {
            // Block
        PValor pvalorNode2;
        PComms pcommsNode3;
        PCommAvalieCasoParte pcommavaliecasoparteNode4;
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        pcommsNode3 = (PComms)nodeArrayList4.get(0);
        pcommavaliecasoparteNode4 = (PCommAvalieCasoParte)nodeArrayList5.get(0);

        pcommavaliecasoparteNode1 = new AComCasoCommAvalieCasoParte(pvalorNode2, pcommsNode3, pcommavaliecasoparteNode4);
        }
	nodeList.add(pcommavaliecasoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASemCasoCommAvalieCasoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalieCasoParte pcommavaliecasoparteNode1;
        {
            // Block
        PCommAvalieSenaoParte pcommavaliesenaoparteNode2;
        pcommavaliesenaoparteNode2 = (PCommAvalieSenaoParte)nodeArrayList1.get(0);

        pcommavaliecasoparteNode1 = new ASemCasoCommAvalieCasoParte(pcommavaliesenaoparteNode2);
        }
	nodeList.add(pcommavaliecasoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AComSenaoCommAvalieSenaoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalieSenaoParte pcommavaliesenaoparteNode1;
        {
            // Block
        PComms pcommsNode2;
        pcommsNode2 = (PComms)nodeArrayList3.get(0);

        pcommavaliesenaoparteNode1 = new AComSenaoCommAvalieSenaoParte(pcommsNode2);
        }
	nodeList.add(pcommavaliesenaoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASemSenaoCommAvalieSenaoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalieSenaoParte pcommavaliesenaoparteNode1;
        {
            // Block

        pcommavaliesenaoparteNode1 = new ASemSenaoCommAvalieSenaoParte();
        }
	nodeList.add(pcommavaliesenaoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ACommAvalieFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommAvalieSenaoParte pcommavaliesenaoparteNode1;
        {
            // Block

        pcommavaliesenaoparteNode1 = new ASemSenaoCommAvalieSenaoParte();
        }
	nodeList.add(pcommavaliesenaoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACommEnquanto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEnquanto pcommenquantoNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PComms pcommsNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList3.get(0);
        pcommsNode3 = (PComms)nodeArrayList6.get(0);

        pcommenquantoNode1 = new ACommEnquanto(pexplogicaNode2, pcommsNode3);
        }
	nodeList.add(pcommenquantoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACommEnquantoFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommEnquantoFim pcommenquantofimNode1;
        {
            // Block

        pcommenquantofimNode1 = new ACommEnquantoFim();
        }
	nodeList.add(pcommenquantofimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACommRepita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommRepita pcommrepitaNode1;
        {
            // Block
        PCommRepitaCommsParte pcommrepitacommsparteNode2;
        pcommrepitacommsparteNode2 = (PCommRepitaCommsParte)nodeArrayList2.get(0);

        pcommrepitaNode1 = new ACommRepita(pcommrepitacommsparteNode2);
        }
	nodeList.add(pcommrepitaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACommRepitaCommsParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommRepitaCommsParte pcommrepitacommsparteNode1;
        {
            // Block
        PComms pcommsNode2;
        PCommRepitaCondicaoParte pcommrepitacondicaoparteNode3;
        pcommsNode2 = (PComms)nodeArrayList1.get(0);
        pcommrepitacondicaoparteNode3 = (PCommRepitaCondicaoParte)nodeArrayList3.get(0);

        pcommrepitacommsparteNode1 = new ACommRepitaCommsParte(pcommsNode2, pcommrepitacondicaoparteNode3);
        }
	nodeList.add(pcommrepitacommsparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACommRepitaCondicaoParte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommRepitaCondicaoParte pcommrepitacondicaoparteNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pcommrepitacondicaoparteNode1 = new ACommRepitaCondicaoParte(pexplogicaNode2);
        }
	nodeList.add(pcommrepitacondicaoparteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACommPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommPara pcommparaNode1;
        {
            // Block
        PVar pvarNode2;
        TInteiro tinteiroNode3;
        PCommParaPassa pcommparapassaNode4;
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList4.get(0);
        pcommparapassaNode4 = (PCommParaPassa)nodeArrayList5.get(0);

        pcommparaNode1 = new ACommPara(pvarNode2, tinteiroNode3, pcommparapassaNode4);
        }
	nodeList.add(pcommparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AComPassoCommParaPassa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommParaPassa pcommparapassaNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        PCommParaAte pcommparaateNode3;
        tinteiroNode2 = (TInteiro)nodeArrayList2.get(0);
        pcommparaateNode3 = (PCommParaAte)nodeArrayList3.get(0);

        pcommparapassaNode1 = new AComPassoCommParaPassa(tinteiroNode2, pcommparaateNode3);
        }
	nodeList.add(pcommparapassaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASemPassoCommParaPassa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommParaPassa pcommparapassaNode1;
        {
            // Block
        PCommParaAte pcommparaateNode2;
        pcommparaateNode2 = (PCommParaAte)nodeArrayList1.get(0);

        pcommparapassaNode1 = new ASemPassoCommParaPassa(pcommparaateNode2);
        }
	nodeList.add(pcommparapassaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACommParaAte */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommParaAte pcommparaateNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        PCommParaFim pcommparafimNode3;
        tinteiroNode2 = (TInteiro)nodeArrayList2.get(0);
        pcommparafimNode3 = (PCommParaFim)nodeArrayList3.get(0);

        pcommparaateNode1 = new ACommParaAte(tinteiroNode2, pcommparafimNode3);
        }
	nodeList.add(pcommparaateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AFimCommParaFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommParaFim pcommparafimNode1;
        {
            // Block
        PComms pcommsNode2;
        pcommsNode2 = (PComms)nodeArrayList2.get(0);

        pcommparafimNode1 = new AFimCommParaFim(pcommsNode2);
        }
	nodeList.add(pcommparafimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANadaCommParaFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommParaFim pcommparafimNode1;
        {
            // Block

        pcommparafimNode1 = new ANadaCommParaFim();
        }
	nodeList.add(pcommparafimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ASubtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASubtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATermExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ADiviTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADiviExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AFimTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AParentesisExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANegativaExpExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegaExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASubstituirVarExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVarExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ASubstituirValExpFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAndExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AAndExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AXorExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANotExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANotExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce APrxExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ADiferenteLogPrecUm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new ADiferenteExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AIgualLogPrecUm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new ADiferenteExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AFatorLogPrecUm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList1.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AMaiorLogPrecDois */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMenorLogPrecDois */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AMaiorqLogPrecDois */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMaiorqExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AMenorqLogPrecDois */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexplogicaNode1 = new AMenorqExpLogica(pexpNode2, pexpNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AParLogPrecDois */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        pexplogicaNode1 = (PExpLogica)nodeArrayList2.get(0);
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {52, SHIFT, 3}, },
			{{-1, ERROR, 2}, {56, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {3, SHIFT, 5}, {4, SHIFT, 6}, {5, SHIFT, 7}, {6, SHIFT, 8}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {33, SHIFT, 14}, {34, SHIFT, 15}, {35, SHIFT, 16}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {41, SHIFT, 31}, },
			{{-1, ERROR, 7}, {41, SHIFT, 32}, },
			{{-1, ERROR, 8}, {52, SHIFT, 33}, },
			{{-1, ERROR, 9}, {41, SHIFT, 34}, },
			{{-1, ERROR, 10}, {41, SHIFT, 35}, },
			{{-1, ERROR, 11}, {41, SHIFT, 36}, },
			{{-1, ERROR, 12}, {52, SHIFT, 17}, },
			{{-1, ERROR, 13}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, {43, SHIFT, 40}, },
			{{-1, ERROR, 18}, {3, SHIFT, 41}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 19}, {3, SHIFT, 43}, },
			{{-1, REDUCE, 5}, {6, SHIFT, 8}, {33, SHIFT, 14}, {34, SHIFT, 15}, {35, SHIFT, 16}, },
			{{-1, ERROR, 21}, {40, SHIFT, 45}, },
			{{-1, ERROR, 22}, {45, SHIFT, 46}, },
			{{-1, REDUCE, 7}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 31}, {52, SHIFT, 17}, },
			{{-1, ERROR, 32}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 33}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, },
			{{-1, ERROR, 34}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 35}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 36}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 37}, {9, SHIFT, 71}, },
			{{-1, ERROR, 38}, {8, SHIFT, 72}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 40}, {48, SHIFT, 73}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 42}, {3, SHIFT, 74}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 45}, {52, SHIFT, 17}, },
			{{-1, ERROR, 46}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 48}, {37, SHIFT, 79}, {42, SHIFT, 80}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 50}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 51}, {20, SHIFT, 50}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 52}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 59}, {19, SHIFT, 86}, {20, SHIFT, 87}, {23, SHIFT, 88}, {24, SHIFT, 89}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, {28, SHIFT, 93}, {37, SHIFT, 94}, {42, SHIFT, 95}, },
			{{-1, REDUCE, 62}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 62}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {37, SHIFT, 102}, {42, SHIFT, 95}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 65}, {39, SHIFT, 104}, },
			{{-1, ERROR, 66}, {19, SHIFT, 86}, {20, SHIFT, 87}, {23, SHIFT, 88}, {24, SHIFT, 89}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, {28, SHIFT, 93}, },
			{{-1, ERROR, 67}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {42, SHIFT, 105}, },
			{{-1, ERROR, 68}, {19, SHIFT, 86}, {20, SHIFT, 87}, {23, SHIFT, 88}, {24, SHIFT, 89}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, {28, SHIFT, 93}, {42, SHIFT, 106}, },
			{{-1, ERROR, 69}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {42, SHIFT, 107}, },
			{{-1, ERROR, 70}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {42, SHIFT, 108}, },
			{{-1, ERROR, 71}, {48, SHIFT, 109}, },
			{{-1, ERROR, 72}, {41, SHIFT, 110}, },
			{{-1, ERROR, 73}, {44, SHIFT, 112}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 75}, {39, SHIFT, 113}, },
			{{-1, REDUCE, 9}, {37, SHIFT, 114}, },
			{{-1, ERROR, 77}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 78}, {19, SHIFT, 86}, {20, SHIFT, 87}, {39, SHIFT, 116}, },
			{{-1, ERROR, 79}, {52, SHIFT, 17}, },
			{{-1, ERROR, 80}, {39, SHIFT, 118}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 84}, {19, SHIFT, 86}, {20, SHIFT, 87}, {23, SHIFT, 88}, {24, SHIFT, 89}, {25, SHIFT, 90}, {26, SHIFT, 91}, {27, SHIFT, 92}, {28, SHIFT, 93}, {42, SHIFT, 119}, },
			{{-1, ERROR, 85}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {42, SHIFT, 120}, },
			{{-1, ERROR, 86}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 87}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 88}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 89}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 90}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 91}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 92}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 93}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 94}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 95}, {39, SHIFT, 130}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 97}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 98}, {20, SHIFT, 50}, {41, SHIFT, 77}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 99}, {20, SHIFT, 50}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 100}, {20, SHIFT, 50}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 101}, {20, SHIFT, 50}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, ERROR, 102}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 105}, {12, SHIFT, 137}, },
			{{-1, ERROR, 106}, {2, SHIFT, 138}, {11, SHIFT, 139}, {14, SHIFT, 140}, },
			{{-1, ERROR, 107}, {2, SHIFT, 138}, {11, SHIFT, 139}, {14, SHIFT, 140}, },
			{{-1, ERROR, 108}, {7, SHIFT, 145}, },
			{{-1, ERROR, 109}, {8, SHIFT, 146}, {10, SHIFT, 147}, },
			{{-1, ERROR, 110}, {20, SHIFT, 50}, {29, SHIFT, 51}, {41, SHIFT, 52}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 114}, {52, SHIFT, 17}, },
			{{-1, ERROR, 115}, {19, SHIFT, 86}, {20, SHIFT, 87}, {42, SHIFT, 119}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 60}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 61}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 78}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 79}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 76}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 80}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 81}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 75}, {21, SHIFT, 97}, {22, SHIFT, 98}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 137}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 138}, {15, SHIFT, 153}, },
			{{-1, ERROR, 139}, {40, SHIFT, 154}, },
			{{-1, ERROR, 140}, {48, SHIFT, 53}, {49, SHIFT, 54}, {50, SHIFT, 55}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 145}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 146}, {48, SHIFT, 157}, },
			{{-1, ERROR, 147}, {48, SHIFT, 158}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 150}, {30, SHIFT, 99}, {31, SHIFT, 100}, {32, SHIFT, 101}, {42, SHIFT, 159}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 152}, {2, SHIFT, 160}, {11, SHIFT, 161}, },
			{{-1, ERROR, 153}, {39, SHIFT, 164}, },
			{{-1, ERROR, 154}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 155}, {40, SHIFT, 166}, },
			{{-1, ERROR, 156}, {2, SHIFT, 167}, },
			{{-1, ERROR, 157}, {2, SHIFT, 169}, {7, SHIFT, 170}, },
			{{-1, ERROR, 158}, {8, SHIFT, 146}, },
			{{-1, ERROR, 159}, {39, SHIFT, 173}, },
			{{-1, ERROR, 160}, {13, SHIFT, 174}, },
			{{-1, ERROR, 161}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 162}, {2, SHIFT, 160}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 165}, {2, SHIFT, 138}, },
			{{-1, ERROR, 166}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, ERROR, 167}, {16, SHIFT, 179}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 169}, {17, SHIFT, 180}, },
			{{-1, ERROR, 170}, {4, SHIFT, 6}, {5, SHIFT, 7}, {13, SHIFT, 9}, {15, SHIFT, 10}, {16, SHIFT, 11}, {17, SHIFT, 12}, {18, SHIFT, 13}, {52, SHIFT, 17}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 174}, {39, SHIFT, 182}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 178}, {2, SHIFT, 138}, {11, SHIFT, 139}, {14, SHIFT, 140}, },
			{{-1, ERROR, 179}, {39, SHIFT, 184}, },
			{{-1, ERROR, 180}, {39, SHIFT, 185}, },
			{{-1, ERROR, 181}, {2, SHIFT, 169}, {7, SHIFT, 170}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 18}, {20, 44}, },
			{{-1, 19}, {13, 38}, {18, 42}, {23, 47}, {137, 152}, {145, 156}, {154, 165}, {161, 175}, {166, 178}, {170, 181}, },
			{{-1, 75}, {114, 151}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 56}, {4, 22}, {12, 37}, {13, 22}, {18, 22}, {23, 22}, {31, 48}, {45, 76}, {79, 48}, {114, 76}, {137, 22}, {145, 22}, {154, 22}, {161, 22}, {166, 22}, {170, 22}, },
			{{-1, 57}, {33, 65}, {140, 155}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 49}, {79, 117}, },
			{{-1, 81}, },
			{{-1, 25}, },
			{{-1, 58}, {94, 129}, {102, 136}, },
			{{-1, 96}, {62, 103}, },
			{{-1, 26}, },
			{{-1, 162}, },
			{{-1, 163}, {162, 176}, },
			{{-1, 27}, },
			{{-1, 141}, {107, 144}, {178, 183}, },
			{{-1, 142}, },
			{{-1, 143}, {165, 177}, },
			{{-1, 28}, },
			{{-1, 168}, },
			{{-1, 29}, },
			{{-1, 39}, },
			{{-1, 111}, },
			{{-1, 30}, },
			{{-1, 148}, },
			{{-1, 149}, {158, 172}, },
			{{-1, 171}, {181, 186}, },
			{{-1, 66}, {32, 59}, {35, 68}, {46, 78}, {52, 84}, {77, 115}, {94, 59}, {102, 59}, },
			{{-1, 60}, {86, 121}, {87, 122}, {88, 123}, {89, 124}, {90, 125}, {91, 126}, {92, 127}, {93, 128}, },
			{{-1, 61}, {50, 82}, {97, 131}, {98, 132}, },
			{{-1, 62}, {34, 67}, {35, 69}, {36, 70}, {52, 85}, {110, 150}, },
			{{-1, 63}, {51, 83}, {99, 133}, {100, 134}, {101, 135}, },
			{{-1, 64}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim.', 'leia', 'escreva', 'const', 'se', 'avalie', 'enquanto', 'para', 'repita', 'inteiro', 'real', 'caractere', id",
			"expecting: '('",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'para', 'repita', id",
			"expecting: dois pontos",
			"expecting: 'de', '+', '-', '*', '/', maior, menor, igual, maior igual, menor igual, diferente, 'e', 'ou', 'xor', virgula, ';', ')', '[', atribuicao",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'para', 'repita', id",
			"expecting: 'fim.'",
			"expecting: atribuicao",
			"expecting: 'fim', 'fim.', 'leia', 'escreva', 'faca', 'ate', 'senao', 'se', 'caso', 'avalie', 'enquanto', 'para', 'repita', id",
			"expecting: '-', 'nao', '(', inteiro, real, string, id",
			"expecting: inteiro, real, string",
			"expecting: 'de'",
			"expecting: 'ate'",
			"expecting: inteiro",
			"expecting: '-', '(', inteiro, real, string, id",
			"expecting: 'fim', 'fim.', 'faca', 'ate', 'senao', 'caso'",
			"expecting: virgula, ')'",
			"expecting: '+', '-', '*', '/', maior, menor, igual, maior igual, menor igual, diferente, 'e', 'ou', 'xor', virgula, ';', dois pontos, ')'",
			"expecting: '+', '-', '*', '/', maior, menor, igual, maior igual, menor igual, diferente, 'e', 'ou', 'xor', virgula, ';', ')'",
			"expecting: '+', '-', maior, menor, igual, maior igual, menor igual, diferente, virgula, ')'",
			"expecting: '+', '-', '*', '/', maior, menor, igual, maior igual, menor igual, diferente, virgula, ';', ')'",
			"expecting: 'e', 'ou', 'xor', virgula, ')'",
			"expecting: ';'",
			"expecting: '+', '-', maior, menor, igual, maior igual, menor igual, diferente",
			"expecting: 'e', 'ou', 'xor', ')'",
			"expecting: '+', '-', maior, menor, igual, maior igual, menor igual, diferente, ')'",
			"expecting: ']'",
			"expecting: virgula, ';'",
			"expecting: '+', '-', ';'",
			"expecting: 'entao'",
			"expecting: 'fim', 'senao', 'caso'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: 'de', '+', '-', '*', '/', maior, menor, igual, maior igual, menor igual, diferente, 'e', 'ou', 'xor', virgula, ';', ')', atribuicao",
			"expecting: '+', '-', ')'",
			"expecting: '*', '/', 'e', 'ou', 'xor', virgula, ')'",
			"expecting: 'avalie'",
			"expecting: 'fim', 'senao'",
			"expecting: 'fim'",
			"expecting: 'fim', 'faca'",
			"expecting: 'se'",
			"expecting: 'enquanto'",
			"expecting: 'para'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 1, 5, 5, 5, 1, 6, 7, 7, 7, 8, 9, 10, 4, 7, 11, 12, 12, 12, 12, 12, 12, 12, 12, 1, 13, 14, 13, 13, 13, 15, 16, 12, 17, 2, 10, 2, 9, 1, 18, 19, 20, 12, 18, 18, 13, 21, 21, 21, 22, 22, 12, 23, 24, 22, 25, 25, 25, 26, 27, 28, 29, 28, 28, 17, 5, 30, 2, 26, 31, 18, 32, 1, 26, 12, 22, 25, 29, 28, 18, 18, 18, 18, 18, 18, 18, 18, 13, 26, 12, 18, 18, 18, 18, 18, 13, 12, 4, 33, 34, 34, 35, 36, 13, 12, 37, 4, 1, 38, 12, 12, 12, 22, 25, 24, 24, 39, 39, 39, 39, 39, 39, 12, 12, 22, 22, 25, 25, 25, 12, 6, 40, 7, 14, 12, 12, 12, 12, 6, 17, 17, 12, 12, 28, 26, 41, 26, 6, 7, 42, 43, 16, 26, 44, 6, 42, 12, 12, 42, 6, 45, 12, 46, 6, 12, 12, 12, 26, 42, 12, 12, 34, 26, 26, 43, 12, 12, 12, 12, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
