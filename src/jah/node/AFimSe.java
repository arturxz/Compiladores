/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.node;

import jah.analysis.*;

@SuppressWarnings("nls")
public final class AFimSe extends PFimSe
{
    private TFim _fim_;
    private TSe _se_;

    public AFimSe()
    {
        // Constructor
    }

    public AFimSe(
        @SuppressWarnings("hiding") TFim _fim_,
        @SuppressWarnings("hiding") TSe _se_)
    {
        // Constructor
        setFim(_fim_);

        setSe(_se_);

    }

    @Override
    public Object clone()
    {
        return new AFimSe(
            cloneNode(this._fim_),
            cloneNode(this._se_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFimSe(this);
    }

    public TFim getFim()
    {
        return this._fim_;
    }

    public void setFim(TFim node)
    {
        if(this._fim_ != null)
        {
            this._fim_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fim_ = node;
    }

    public TSe getSe()
    {
        return this._se_;
    }

    public void setSe(TSe node)
    {
        if(this._se_ != null)
        {
            this._se_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._se_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fim_)
            + toString(this._se_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fim_ == child)
        {
            this._fim_ = null;
            return;
        }

        if(this._se_ == child)
        {
            this._se_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fim_ == oldChild)
        {
            setFim((TFim) newChild);
            return;
        }

        if(this._se_ == oldChild)
        {
            setSe((TSe) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
