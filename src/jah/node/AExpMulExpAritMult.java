/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.node;

import jah.analysis.*;

@SuppressWarnings("nls")
public final class AExpMulExpAritMult extends PAritMult
{
    private PExp _exp_;
    private TMult _mult_;
    private PAritDiv _aritDiv_;

    public AExpMulExpAritMult()
    {
        // Constructor
    }

    public AExpMulExpAritMult(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TMult _mult_,
        @SuppressWarnings("hiding") PAritDiv _aritDiv_)
    {
        // Constructor
        setExp(_exp_);

        setMult(_mult_);

        setAritDiv(_aritDiv_);

    }

    @Override
    public Object clone()
    {
        return new AExpMulExpAritMult(
            cloneNode(this._exp_),
            cloneNode(this._mult_),
            cloneNode(this._aritDiv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpMulExpAritMult(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TMult getMult()
    {
        return this._mult_;
    }

    public void setMult(TMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public PAritDiv getAritDiv()
    {
        return this._aritDiv_;
    }

    public void setAritDiv(PAritDiv node)
    {
        if(this._aritDiv_ != null)
        {
            this._aritDiv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aritDiv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._mult_)
            + toString(this._aritDiv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._aritDiv_ == child)
        {
            this._aritDiv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._mult_ == oldChild)
        {
            setMult((TMult) newChild);
            return;
        }

        if(this._aritDiv_ == oldChild)
        {
            setAritDiv((PAritDiv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
