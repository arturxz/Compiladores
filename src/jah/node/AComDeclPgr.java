/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.node;

import jah.analysis.*;

@SuppressWarnings("nls")
public final class AComDeclPgr extends PPgr
{
    private TId _id_;
    private PDecls _decls_;

    public AComDeclPgr()
    {
        // Constructor
    }

    public AComDeclPgr(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PDecls _decls_)
    {
        // Constructor
        setId(_id_);

        setDecls(_decls_);

    }

    @Override
    public Object clone()
    {
        return new AComDeclPgr(
            cloneNode(this._id_),
            cloneNode(this._decls_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComDeclPgr(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PDecls getDecls()
    {
        return this._decls_;
    }

    public void setDecls(PDecls node)
    {
        if(this._decls_ != null)
        {
            this._decls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decls_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._decls_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._decls_ == child)
        {
            this._decls_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._decls_ == oldChild)
        {
            setDecls((PDecls) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
