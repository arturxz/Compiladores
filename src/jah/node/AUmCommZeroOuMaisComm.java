/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.node;

import jah.analysis.*;

@SuppressWarnings("nls")
public final class AUmCommZeroOuMaisComm extends PZeroOuMaisComm
{
    private PComm _comm_;
    private PZeroOuMaisComm _zeroOuMaisComm_;

    public AUmCommZeroOuMaisComm()
    {
        // Constructor
    }

    public AUmCommZeroOuMaisComm(
        @SuppressWarnings("hiding") PComm _comm_,
        @SuppressWarnings("hiding") PZeroOuMaisComm _zeroOuMaisComm_)
    {
        // Constructor
        setComm(_comm_);

        setZeroOuMaisComm(_zeroOuMaisComm_);

    }

    @Override
    public Object clone()
    {
        return new AUmCommZeroOuMaisComm(
            cloneNode(this._comm_),
            cloneNode(this._zeroOuMaisComm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUmCommZeroOuMaisComm(this);
    }

    public PComm getComm()
    {
        return this._comm_;
    }

    public void setComm(PComm node)
    {
        if(this._comm_ != null)
        {
            this._comm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comm_ = node;
    }

    public PZeroOuMaisComm getZeroOuMaisComm()
    {
        return this._zeroOuMaisComm_;
    }

    public void setZeroOuMaisComm(PZeroOuMaisComm node)
    {
        if(this._zeroOuMaisComm_ != null)
        {
            this._zeroOuMaisComm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._zeroOuMaisComm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comm_)
            + toString(this._zeroOuMaisComm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comm_ == child)
        {
            this._comm_ = null;
            return;
        }

        if(this._zeroOuMaisComm_ == child)
        {
            this._zeroOuMaisComm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comm_ == oldChild)
        {
            setComm((PComm) newChild);
            return;
        }

        if(this._zeroOuMaisComm_ == oldChild)
        {
            setZeroOuMaisComm((PZeroOuMaisComm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
