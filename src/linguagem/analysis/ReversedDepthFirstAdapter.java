/* This file was generated by SableCC (http://www.sablecc.org/). */

package linguagem.analysis;

import java.util.*;
import linguagem.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPgr().apply(this);
        outStart(node);
    }

    public void inAPgr(APgr node)
    {
        defaultIn(node);
    }

    public void outAPgr(APgr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgr(APgr node)
    {
        inAPgr(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        {
            List<PComm> copy = new ArrayList<PComm>(node.getComm());
            Collections.reverse(copy);
            for(PComm e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAPgr(node);
    }

    public void inAVariavelDecl(AVariavelDecl node)
    {
        defaultIn(node);
    }

    public void outAVariavelDecl(AVariavelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDecl(AVariavelDecl node)
    {
        inAVariavelDecl(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDecl(node);
    }

    public void inAConstanteDecl(AConstanteDecl node)
    {
        defaultIn(node);
    }

    public void outAConstanteDecl(AConstanteDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDecl(AConstanteDecl node)
    {
        inAConstanteDecl(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstanteDecl(node);
    }

    public void inAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComVirgulaPosDecl(AComVirgulaPosDecl node)
    {
        inAComVirgulaPosDecl(node);
        if(node.getPosDecl() != null)
        {
            node.getPosDecl().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComVirgulaPosDecl(node);
    }

    public void inASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultIn(node);
    }

    public void outASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemVirgulaPosDecl(ASemVirgulaPosDecl node)
    {
        inASemVirgulaPosDecl(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASemVirgulaPosDecl(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inAStringTipo(AStringTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipo(AStringTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipo(AStringTipo node)
    {
        inAStringTipo(node);
        if(node.getTipoString() != null)
        {
            node.getTipoString().apply(this);
        }
        outAStringTipo(node);
    }

    public void inANormalVar(ANormalVar node)
    {
        defaultIn(node);
    }

    public void outANormalVar(ANormalVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalVar(ANormalVar node)
    {
        inANormalVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outANormalVar(node);
    }

    public void inAArrayVar(AArrayVar node)
    {
        defaultIn(node);
    }

    public void outAArrayVar(AArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        inAArrayVar(node);
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        outAArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAComm(AComm node)
    {
        defaultIn(node);
    }

    public void outAComm(AComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComm(AComm node)
    {
        inAComm(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAComm(node);
    }

    public void inAFatorExp(AFatorExp node)
    {
        defaultIn(node);
    }

    public void outAFatorExp(AFatorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExp(AFatorExp node)
    {
        inAFatorExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASubExp(node);
    }

    public void inATerminalFator(ATerminalFator node)
    {
        defaultIn(node);
    }

    public void outATerminalFator(ATerminalFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerminalFator(ATerminalFator node)
    {
        inATerminalFator(node);
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        outATerminalFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outADivFator(node);
    }

    public void inAInteiroTerminal(AInteiroTerminal node)
    {
        defaultIn(node);
    }

    public void outAInteiroTerminal(AInteiroTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTerminal(AInteiroTerminal node)
    {
        inAInteiroTerminal(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTerminal(node);
    }

    public void inARealTerminal(ARealTerminal node)
    {
        defaultIn(node);
    }

    public void outARealTerminal(ARealTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTerminal(ARealTerminal node)
    {
        inARealTerminal(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTerminal(node);
    }

    public void inAExpTerminal(AExpTerminal node)
    {
        defaultIn(node);
    }

    public void outAExpTerminal(AExpTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTerminal(AExpTerminal node)
    {
        inAExpTerminal(node);
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        outAExpTerminal(node);
    }
}
