/* This file was generated by SableCC (http://www.sablecc.org/). */

package linguagem.analysis;

import java.util.*;
import linguagem.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPgr().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPgr(APgr node)
    {
        defaultIn(node);
    }

    public void outAPgr(APgr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPgr(APgr node)
    {
        inAPgr(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComm> copy = new ArrayList<PComm>(node.getComm());
            for(PComm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        outAPgr(node);
    }

    public void inADecl(ADecl node)
    {
        defaultIn(node);
    }

    public void outADecl(ADecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecl(ADecl node)
    {
        inADecl(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outADecl(node);
    }

    public void inAComm(AComm node)
    {
        defaultIn(node);
    }

    public void outAComm(AComm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComm(AComm node)
    {
        inAComm(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAComm(node);
    }

    public void inAFatorExp(AFatorExp node)
    {
        defaultIn(node);
    }

    public void outAFatorExp(AFatorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExp(AFatorExp node)
    {
        inAFatorExp(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASubExp(node);
    }

    public void inATerminalFator(ATerminalFator node)
    {
        defaultIn(node);
    }

    public void outATerminalFator(ATerminalFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerminalFator(ATerminalFator node)
    {
        inATerminalFator(node);
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        outATerminalFator(node);
    }

    public void inAMultFator(AMultFator node)
    {
        defaultIn(node);
    }

    public void outAMultFator(AMultFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFator(AMultFator node)
    {
        inAMultFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        outAMultFator(node);
    }

    public void inADivFator(ADivFator node)
    {
        defaultIn(node);
    }

    public void outADivFator(ADivFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFator(ADivFator node)
    {
        inADivFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerminal() != null)
        {
            node.getTerminal().apply(this);
        }
        outADivFator(node);
    }

    public void inAInteiroTerminal(AInteiroTerminal node)
    {
        defaultIn(node);
    }

    public void outAInteiroTerminal(AInteiroTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTerminal(AInteiroTerminal node)
    {
        inAInteiroTerminal(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTerminal(node);
    }

    public void inARealTerminal(ARealTerminal node)
    {
        defaultIn(node);
    }

    public void outARealTerminal(ARealTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTerminal(ARealTerminal node)
    {
        inARealTerminal(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTerminal(node);
    }

    public void inAExpTerminal(AExpTerminal node)
    {
        defaultIn(node);
    }

    public void outAExpTerminal(AExpTerminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpTerminal(AExpTerminal node)
    {
        inAExpTerminal(node);
        if(node.getAbreParentesis() != null)
        {
            node.getAbreParentesis().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParentesis() != null)
        {
            node.getFechaParentesis().apply(this);
        }
        outAExpTerminal(node);
    }
}
